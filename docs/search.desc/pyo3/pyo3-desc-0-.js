searchState.loadedDescShard("pyo3", 0, "Rust bindings to the Python interpreter.\nType erased version of <code>Self</code>\nA borrowed equivalent to <code>Bound</code>.\nA GIL-attached equivalent to <code>Py&lt;T&gt;</code>.\nOwned or borrowed gil-bound Python smart pointer\nError that indicates a failure to convert a PyAny to a …\nError that indicates a failure to convert a PyAny to a …\nContains the error value\nContains the success value\nA GIL-independent reference to an object allocated on the …\nRepresents a Python exception.\nHelper conversion trait that allows to use custom …\nA commonly-used alias for <code>Py&lt;PyAny&gt;</code>.\nRepresents the result of a Python call.\nRepresents the major, minor, and patch (if any) versions …\nPython exceptions that can be converted to <code>PyErr</code>.\nComputes <code>self + other</code>.\nAppends an item to the list.\nAdd the module to the initialization table in order to …\nArguments for exception\nHelper to cast to <code>Bound&lt;&#39;py, PyAny&gt;</code>.\nHelper to cast to <code>Py&lt;PyAny&gt;</code>.\nBorrow this smart pointer.\nCasts this <code>Bound&lt;T&gt;</code> to a <code>Borrowed&lt;T&gt;</code> smart pointer.\nGets the Python bytes as a byte slice. Because Python …\nTurn this smart pointer into a borrowed reference pointer\nReturns the raw FFI pointer represented by self.\nReturns the raw FFI pointer represented by self.\nGets the underlying FFI pointer, returns a borrowed …\nReturns the raw FFI pointer represented by self.\nReturns <code>self</code> cast as a <code>PySequence</code>.\nUpcast this <code>Bound&lt;PyClass&gt;</code> to its base type by reference.\nRetrieves the underlying FFI pointer associated with this …\nRemoves the connection for this <code>Bound&lt;T&gt;</code> from the GIL, …\nAttaches this <code>Py</code> to the given Python context, allowing …\nSame as <code>bind</code> but produces a <code>Borrowed&lt;T&gt;</code> instead of a …\nComputes <code>self &amp; other</code>.\nComputes <code>self | other</code>.\nComputes <code>self ^ other</code>.\nImmutably borrows the value <code>T</code>.\nImmutably borrows the value <code>T</code>.\nMutably borrows the value <code>T</code>.\nMutably borrows the value <code>T</code>.\n<code>PyBuffer</code> implementation\nDefines how Python calls are dispatched, see <code>PyCallArgs</code>…\nCalls the object.\nCalls the object without arguments.\nCalls the object with only positional arguments.\nDeprecated name for <code>Py::call</code>.\nCalls a method on the object.\nCalls a method on the object with no arguments.\nCalls a method on the object with only positional …\nDeprecated name for <code>Py::call_method</code>.\nReturn the cause (either an exception instance, or None, …\nOld module which contained some implementation details of …\nClone the PyErr. This requires the GIL, which is why PyErr …\nMakes a clone of <code>self</code>.\nDetermines if self contains <code>value</code>.\nDefines conversions between Rust and Python types.\nDefines a new exception type.\nDeletes the <code>index</code>th element of self.\nDeletes the slice from <code>low</code> to <code>high</code> from <code>self</code>.\nPrints a standard traceback to <code>sys.stderr</code>.\nComputes <code>self / other</code>.\nComputes <code>divmod(self, other)</code>.\nDowncast this <code>PyObject</code> to a concrete Python type or …\nDowncast this <code>PyObject</code> to a concrete Python type or …\nCasts the PyObject to a concrete Python object type …\nCasts the PyObject to a concrete Python object type …\nDrops <code>self</code> and immediately decreases its reference count.\nException and warning types defined by Python.\nExtracts some type from the Python object.\nExtracts <code>Self</code> from the source <code>PyObject</code>.\nExtracts <code>Self</code> from the source <code>PyObject</code>.\nEquivalent to PyErr::take, but when no error is set:\nRaw FFI declarations for Python’s C API.\nComputes <code>self // other</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate borrow on a Bound\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a new <code>Bound&lt;&#39;py, PyAny&gt;</code> from a pointer by …\nCreate a <code>Py&lt;T&gt;</code> instance by creating a new reference from …\nConstructs a new <code>Bound&lt;&#39;py, PyAny&gt;</code> from a pointer by …\nCreate a <code>Py&lt;T&gt;</code> instance by creating a new reference from …\nConstructs a new <code>Bound&lt;&#39;py, PyAny&gt;</code> from a pointer by …\nCreate a <code>Py&lt;T&gt;</code> instance by creating a new reference from …\nConstructs a new <code>Bound&lt;&#39;py, PyAny&gt;</code> from a pointer. Panics …\nCreate a <code>Py&lt;T&gt;</code> instance by taking ownership of the given …\nConstructs a new <code>Bound&lt;&#39;py, PyAny&gt;</code> from a pointer. Returns …\nCreate a <code>Py&lt;T&gt;</code> instance by taking ownership of the given …\nConstructs a new <code>Bound&lt;&#39;py, PyAny&gt;</code> from a pointer. Returns …\nCreate a <code>Py&lt;T&gt;</code> instance by taking ownership of the given …\nConstructs a new <code>Borrowed&lt;&#39;a, &#39;py, PyAny&gt;</code> from a pointer. …\nConstructs a new <code>Borrowed&lt;&#39;a, &#39;py, PyAny&gt;</code> from a pointer. …\nConstructs a new <code>Borrowed&lt;&#39;a, &#39;py, PyAny&gt;</code> from a pointer. …\nConstructs a new PyErr from the given Python type and …\nDeprecated name for <code>PyErr::from_type</code>.\nCreates a new PyErr.\nDeprecated name for <code>PyErr::from_value</code>.\nGets the fully qualified name of the <code>PyType</code>.\nProvide an immutable borrow of the value <code>T</code> without …\nProvide an immutable borrow of the value <code>T</code> without …\nGets the list item at the specified index.\nGets the list item at the specified index. Undefined …\nGets the reference count of the <code>ffi::PyObject</code> pointer.\nTakes the slice <code>self[low:high]</code> and returns it as a new …\nReturns the type of this exception.\nDeprecated name for <code>PyErr::get_type</code>.\nRetrieves an attribute value.\nDefines a Rust type for an exception defined in Python …\nVariant of <code>import_exception</code> that does not emit code needed …\nReturns the first index <code>i</code> for which <code>self[i] == value</code>.\nInserts an item at the specified index.\nInterns <code>text</code> as a Python string and stores a reference to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUpcast the target type of this smart pointer\nHelper to cast to <code>Bound&lt;&#39;py, PyAny&gt;</code>, transferring …\nHelper to cast to <code>Py&lt;PyAny&gt;</code>, transferring ownership.\nTurns this smart pointer into an owned [<code>Bound&lt;&#39;py, T&gt;</code>]\nSame as <code>bind</code> but takes ownership of <code>self</code>.\nConsumes this <code>DowncastIntoError</code> and returns the original …\nReturns an iterator of values in this set.\nReturns an iterator of values in this set.\nReturns an iterator of values in this set.\nReturns an iterator of values in this set.\nTurn this smart pointer into a strong reference pointer\nReturns an owned raw FFI pointer represented by self.\nReturns an owned raw FFI pointer represented by self.\nConverts a <code>Bound</code> instance to <code>PyObject</code>.\nConverts <code>&amp;Bound</code> instance -&gt; PyObject, increasing the …\nConverts <code>Py</code> instance -&gt; PyObject.\nConverts a <code>Py</code> instance to <code>PyObject</code>. Consumes <code>self</code> without …\nReturns <code>self</code> cast as a <code>PySequence</code>.\nUpcast this <code>Bound&lt;PyClass&gt;</code> to its base type by value.\nConsumes self to take ownership of the exception value …\nReturns whether <code>self</code> and <code>other</code> point to the same object. …\nChecks if the list is empty.\nReturns true if the current exception is instance of <code>T</code>.\nDeprecated name for <code>PyErr::is_instance</code>.\nReturns true if the current exception is instance of <code>T</code>.\nReturns whether the object is considered to be None.\nChecks whether <code>self</code> is a subclass of <code>other</code>.\nChecks whether <code>self</code> is a subclass of type <code>T</code>.\nReturns whether the object is considered to be true.\nReturns an iterator over this list’s items.\nReturns the length of the list.\nIterates over a list while holding a critical section, …\nComputes <code>self &lt;&lt; other</code>.\nPython major version (e.g. <code>3</code>).\nFundamental properties of objects tied to the Python …\nSupport for the Python <code>marshal</code> format.\nReturns true if the current exception matches the …\nComputes <code>self @ other</code>.\nPython minor version (e.g. <code>11</code>).\nGets the name of the module defining the <code>PyType</code>.\nComputes <code>self * other</code>.\nGets the name of the <code>PyType</code>.\nCreates a new PyErr of type <code>T</code>.\nCreates a new instance <code>Bound&lt;T&gt;</code> of a <code>#[pyclass]</code> on the …\nCreates a new instance <code>Py&lt;T&gt;</code> of a <code>#[pyclass]</code> on the Python …\nCreate a new <code>PyDowncastError</code> representing a failure to …\nCreate a new <code>DowncastIntoError</code> representing a failure to …\nCreates a new exception type with the given name and …\nDeprecated name for <code>PyErr::new_type</code>.\nRetrieves the next item from an iterator.\nGets whether an error is present in the Python interpreter…\nHelper to convert Rust panics to Python exceptions.\nPython patch version (e.g. <code>0</code>).\nComputes <code>self ** other % modulus</code> (<code>pow(self, other, modulus)</code>…\nPyO3’s prelude.\nPrepares the use of Python in a free-threaded context.\nCalls <code>sys.excepthook</code> and then prints a standard traceback …\nCalls <code>sys.excepthook</code> and then prints a standard traceback …\nReturns the GIL token associated with this object.\nA convenient macro to execute a Python code snippet, with …\nContains types for working with Python objects that own …\nPyO3’s interior mutability primitive.\n<code>PyClass</code> and related traits.\nA proc macro used to expose Rust structs and fieldless …\nContains initialization utilities for <code>#[pyclass]</code>.\nA proc macro used to expose Rust functions to Python.\nA proc macro used to expose methods to Python.\nA proc macro used to implement Python modules.\nGets the qualified name of the <code>PyType</code>.\nComputes <code>self % other</code>.\nWrites the error back to the Python interpreter’s global …\nReverses the list in-place. Equivalent to the Python …\nComputes <code>self &gt;&gt; other</code>.\nSends a value into a python generator. This is the …\nSet the cause associated with the exception, pass <code>None</code> to …\nSets the item at the specified index.\nAssigns the sequence <code>seq</code> to the slice of <code>self</code> from <code>low</code> to …\nSets an attribute value.\nSorts the list in-place. Equivalent to the Python …\nComputes <code>self - other</code>.\nPython version suffix, if applicable (e.g. <code>a0</code>).\nSynchronization mechanisms based on the Python GIL.\nTakes the current error from the Python interpreter’s …\nConverts the <code>PyString</code> into a Rust string, avoiding copying …\nConverts <code>&amp;Bound</code> instance -&gt; PyObject, increasing the …\nConverts <code>Py</code> instance -&gt; PyObject.\nConverts <code>Py</code> instance -&gt; PyObject.\nCreates a new owned <code>Bound&lt;T&gt;</code> from this borrowed reference …\nGets the Python string as a Rust UTF-8 string slice.\nConverts the <code>PyString</code> into a Rust string.\nReturn a new tuple containing the contents of the list; …\nReturns the traceback of this exception object.\nDeprecated name for <code>PyErr::traceback</code>.\nAttempts to immutably borrow the value <code>T</code>, returning an …\nAttempts to immutably borrow the value <code>T</code>, returning an …\nAttempts to mutably borrow the value <code>T</code>, returning an error …\nAttempts to mutably borrow the value <code>T</code>, returning an error …\nCreates a new Python <code>bytearray</code> object from another Python …\nCreates a new Python <code>memoryview</code> object from another Python …\nPython type object information\nVarious types defined by the Python interpreter such as <code>int</code>…\nTurn this smart pointer into an owned <code>Py&lt;T&gt;</code>\nRemoves the connection for this <code>Bound&lt;T&gt;</code> from the GIL, …\nReturns the value of this exception.\nDeprecated name for <code>PyErr::value</code>.\nIssues a warning message.\nDeprecated name for <code>PyErr::warn</code>.\nIssues a warning message, with more control over the …\nDeprecated name for <code>PyErr::warn_explicit</code>.\nExecutes the provided closure with an embedded Python …\nWraps a Rust function annotated with <code>#[pyfunction]</code>.\nWraps a Rust function annotated with <code>#[pyfunction]</code>.\nReturns a function that takes a <code>Python</code> instance and …\nReports the error as unraisable.\nDeprecated name for <code>PyErr::write_unraisable</code>.\nA boolean type.\nTrait implemented for possible element types of <code>PyBuffer</code>.\nRepresents the type of a Python buffer element.\nA float type.\nAllows access to the underlying buffer used by a python …\nLike std::cell::Cell, but only provides read-only access …\nA signed integer type.\nAn unknown type. This may occur when parsing has failed.\nAn unsigned integer type.\nGets the buffer memory as a slice.\nGets the buffer memory as a slice.\nGets the buffer memory as a slice.\nReturns a pointer to the current value.\nGets the buffer memory as a slice.\nGets the pointer to the start of the buffer memory.\nCopies the specified slice into the buffer. If the buffer …\nCopies the specified slice into the buffer. If the buffer …\nCopies the buffer elements to the specified slice. If the …\nCopies the buffer elements to the specified slice. If the …\nGets the number of dimensions.\nA NUL terminated string in struct module style syntax …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDetermines the <code>ElementType</code> from a Python <code>struct</code> module …\nGets the underlying buffer from the specified python …\nReturns a copy of the current value.\nDeprecated name for <code>PyBuffer::get</code>.\nGets a pointer to the specified item.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets whether the buffer is contiguous in C-style order …\nGets whether the element specified in the format string is …\nGets whether the buffer is contiguous in Fortran-style …\nGets the total number of items.\nGets the size of a single element, in bytes. Important …\n<code>item_size() * item_count()</code>. For contiguous arrays, this is …\nGets whether the underlying buffer is read-only.\nReleases the buffer object, freeing the reference to the …\nReturns an array of length <code>dimensions</code>. <code>shape()[i]</code> is the …\nReturns an array that holds, for each dimension, the …\nAn array of length ndim. If <code>suboffsets[n] &gt;= 0</code>, the values …\nCopies the buffer elements to a newly allocated vector. If …\nCopies the buffer elements to a newly allocated vector. If …\nThe width of the signed integer in bytes.\nThe width of the unsigned integer in bytes.\nThe width of the float in bytes.\nThis trait marks types that can be used as arguments to …\nOld module which contained some implementation details of …\nOld module which contained some implementation details of …\nReturns a borrowed pointer to a Python object.\nThe type returned in the event of a conversion error.\nExtract a type from a Python object.\nExpected form of <code>FromPyObject</code> to be used in a future PyO3 …\nDefines a conversion from a Rust type to a Python object.\nDefines a conversion from a Rust type to a Python object, …\nConvenience methods for common usages of <code>IntoPyObject</code>. …\nThe smart pointer type to use.\nThe Python output type\nConversion trait that allows various objects to be …\nReturns the underlying FFI pointer as a borrowed pointer.\nExtracts <code>Self</code> from the bound smart pointer <code>obj</code>.\nExtracts <code>Self</code> from the bound smart pointer <code>obj</code>.\nConverts <code>self</code> into an owned Python object, dropping type …\nPerforms the conversion.\nConverts <code>self</code> into an owned Python object, dropping type …\nPerforms the conversion.\nConverts <code>self</code> into a Python object.\nConverts self into a Python object.\nRepresents Python’s <code>ArithmeticError</code> exception.\nRepresents Python’s <code>AssertionError</code> exception.\nRepresents Python’s <code>AttributeError</code> exception.\nRepresents Python’s <code>BaseException</code> exception.\nRepresents Python’s <code>BaseExceptionGroup</code> exception.\nRepresents Python’s <code>BlockingIOError</code> exception.\nRepresents Python’s <code>BrokenPipeError</code> exception.\nRepresents Python’s <code>BufferError</code> exception.\nRepresents Python’s <code>BytesWarning</code> exception.\nRepresents Python’s <code>ChildProcessError</code> exception.\nRepresents Python’s <code>ConnectionAbortedError</code> exception.\nRepresents Python’s <code>ConnectionError</code> exception.\nRepresents Python’s <code>ConnectionRefusedError</code> exception.\nRepresents Python’s <code>ConnectionResetError</code> exception.\nRepresents Python’s <code>DeprecationWarning</code> exception.\nRepresents Python’s <code>EOFError</code> exception.\nRepresents Python’s <code>EncodingWarning</code> exception.\nRepresents Python’s <code>EnvironmentError</code> exception.\nRepresents Python’s <code>Exception</code> exception.\nRepresents Python’s <code>FileExistsError</code> exception.\nRepresents Python’s <code>FileNotFoundError</code> exception.\nRepresents Python’s <code>FloatingPointError</code> exception.\nRepresents Python’s <code>FutureWarning</code> exception.\nRepresents Python’s <code>GeneratorExit</code> exception.\nRepresents Python’s <code>IOError</code> exception.\nRepresents Python’s <code>ImportError</code> exception.\nRepresents Python’s <code>ImportWarning</code> exception.\nRepresents Python’s <code>IndexError</code> exception.\nRepresents Python’s <code>InterruptedError</code> exception.\nRepresents Python’s <code>IsADirectoryError</code> exception.\nRepresents Python’s <code>KeyError</code> exception.\nRepresents Python’s <code>KeyboardInterrupt</code> exception.\nRepresents Python’s <code>LookupError</code> exception.\nRepresents Python’s <code>MemoryError</code> exception.\nRepresents Python’s <code>ModuleNotFoundError</code> exception.\nRepresents Python’s <code>NameError</code> exception.\nRepresents Python’s <code>NotADirectoryError</code> exception.\nRepresents Python’s <code>NotImplementedError</code> exception.\nRepresents Python’s <code>OSError</code> exception.\nRepresents Python’s <code>OverflowError</code> exception.\nRepresents Python’s <code>PendingDeprecationWarning</code> exception.\nRepresents Python’s <code>PermissionError</code> exception.\nRepresents Python’s <code>ProcessLookupError</code> exception.\nRepresents Python’s <code>RecursionError</code> exception.\nRepresents Python’s <code>ReferenceError</code> exception.\nRepresents Python’s <code>ResourceWarning</code> exception.\nRepresents Python’s <code>RuntimeError</code> exception.\nRepresents Python’s <code>RuntimeWarning</code> exception.\nRepresents Python’s <code>StopAsyncIteration</code> exception.\nRepresents Python’s <code>StopIteration</code> exception.\nRepresents Python’s <code>SyntaxError</code> exception.\nRepresents Python’s <code>SyntaxWarning</code> exception.\nRepresents Python’s <code>SystemError</code> exception.\nRepresents Python’s <code>SystemExit</code> exception.\nRepresents Python’s <code>TimeoutError</code> exception.\nRepresents Python’s <code>TypeError</code> exception.\nRepresents Python’s <code>UnboundLocalError</code> exception.\nRepresents Python’s <code>UnicodeDecodeError</code> exception.\nRepresents Python’s <code>UnicodeEncodeError</code> exception.\nRepresents Python’s <code>UnicodeError</code> exception.\nRepresents Python’s <code>UnicodeTranslateError</code> exception.\nRepresents Python’s <code>UnicodeWarning</code> exception.\nRepresents Python’s <code>UserWarning</code> exception.\nRepresents Python’s <code>ValueError</code> exception.\nRepresents Python’s <code>Warning</code> exception.\nRepresents Python’s <code>ZeroDivisionError</code> exception.\nExceptions defined in Python’s <code>asyncio</code> module.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a Python <code>UnicodeDecodeError</code>.\nDeprecated name for <code>PyUnicodeDecodeError::new</code>.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a Python <code>UnicodeDecodeError</code> from a Rust UTF-8 …\nDeprecated name for <code>PyUnicodeDecodeError::new_utf8</code>.\nExceptions defined in Python’s <code>socket</code> module.\nA Rust type representing an exception defined in Python …\nA Rust type representing an exception defined in Python …\nA Rust type representing an exception defined in Python …\nA Rust type representing an exception defined in Python …\nA Rust type representing an exception defined in Python …\nA Rust type representing an exception defined in Python …\nA Rust type representing an exception defined in Python …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA Rust type representing an exception defined in Python …\nA Rust type representing an exception defined in Python …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nCreates a new <code>PyErr</code> of this type.\nA Rust type representing an exception defined in Python …\nNo value.\nNo value.\nMaximum number of dimensions\nbuilt-in ‘object’\nThis variant corresponds with <code>METH_VARARGS</code> <em>or</em> <code>METH_NOARGS</code> …\nThis variant corresponds with <code>METH_FASTCALL</code>.\nThis variant corresponds with <code>METH_FASTCALL</code> | <code>METH_KEYWORDS</code>…\nThis variant corresponds with <code>METH_VARARGS</code> | <code>METH_KEYWORDS</code>.\nThis variant corresponds with <code>METH_METHOD</code> | <code>METH_FASTCALL</code> …\nReturns a pointer to a <code>PyDateTime_CAPI</code> instance\nCheck if <code>op</code> is a <code>PyDateTimeAPI.DateTimeType</code> or subtype.\nCheck if <code>op</code>’s type is exactly <code>PyDateTimeAPI.DateTimeType</code>.\nRetrieve the fold component of a <code>PyDateTime_DateTime</code>. …\nRetrieve the hour component of a <code>PyDateTime_DateTime</code>. …\nRetrieve the microsecond component of a <code>PyDateTime_DateTime</code>…\nRetrieve the minute component of a <code>PyDateTime_DateTime</code>. …\nRetrieve the second component of a <code>PyDateTime_DateTime</code>. …\nRetrieve the tzinfo component of a <code>PyDateTime_DateTime</code>. …\nRetrieve the days component of a <code>PyDateTime_Delta</code>.\nRetrieve the seconds component of a <code>PyDateTime_Delta</code>.\nRetrieve the seconds component of a <code>PyDateTime_Delta</code>.\nStructure representing a <code>datetime.date</code>\nStructure representing a <code>datetime.datetime</code>.\nStructure representing a <code>datetime.timedelta</code>.\nRetrieve the day component of a <code>PyDateTime_Date</code> or …\nRetrieve the month component of a <code>PyDateTime_Date</code> or …\nRetrieve the year component of a <code>PyDateTime_Date</code> or …\nPopulates the <code>PyDateTimeAPI</code> object\nRetrieve the fold component of a <code>PyDateTime_Time</code>. Returns …\nRetrieve the hour component of a <code>PyDateTime_Time</code>. Returns …\nRetrieve the microsecond component of a <code>PyDateTime_DateTime</code>…\nRetrieve the minute component of a <code>PyDateTime_Time</code>. …\nRetrieve the second component of a <code>PyDateTime_DateTime</code>. …\nRetrieve the tzinfo component of a <code>PyDateTime_Time</code>. …\nStructure representing a <code>datetime.time</code>.\nType Check macros\nCheck if <code>op</code>’s type is exactly <code>PyDateTimeAPI.DateType</code>.\nCheck if <code>op</code> is a <code>PyDateTimeAPI.DetaType</code> or subtype.\nCheck if <code>op</code>’s type is exactly <code>PyDateTimeAPI.DeltaType</code>.\nRepresents the PyGetSetDef structure.\nMacro, trading safety for speed\nMacro, <em>only</em> to be used to fill in brand new lists\nRepresents the PyMemberDef structure.\nRepresents the PyMethodDef structure.\nFunction types used to implement Python callables.\nThis union is anonymous in CPython, so the name was given …\nbuilt-in ‘super’\nCheck if <code>op</code> is a <code>PyDateTimeAPI.TZInfoType</code> or subtype.\nCheck if <code>op</code>’s type is exactly <code>PyDateTimeAPI.TZInfoType</code>.\nCheck if <code>op</code> is a <code>PyDateTimeAPI.TimeType</code> or subtype.\nCheck if <code>op</code>’s type is exactly <code>PyDateTimeAPI.TimeType</code>.\nMacro, trading safety for speed\nMacro, <em>only</em> to be used to fill in brand new tuples\nbuilt-in ‘type’\nSet if the type allows subclassing\nObjects support garbage collection (see objimp.h)\nSet if the type implements the vectorcall protocol (PEP …\nSet if the type object is dynamically allocated\nSet if the type is ‘ready’ – fully initialized\nSet while the type is being ‘readied’, to prevent …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThis variant corresponds with <code>METH_FASTCALL</code>.\nThis variant corresponds with <code>METH_FASTCALL</code> | <code>METH_KEYWORDS</code>…\nStructure representing a <code>datetime.datetime</code> without a <code>tzinfo</code>…\nStructure representing a <code>datetime.time</code> without a <code>tzinfo</code> …\nGet the frame evaluation function.\nSet the frame evaluation function.\nGet the <code>ascii</code> field of the <code>PyASCIIObject</code> state bitfield.\nThis is a helper macro to create a <code>&amp;&#39;static CStr</code>.\nGet the <code>compact</code> field of the <code>PyASCIIObject</code> state bitfield.\nC API Compatibility Shims\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the <code>interned</code> field of the <code>PyASCIIObject</code> state bitfield.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the <code>kind</code> field of the <code>PyASCIIObject</code> state bitfield.\nOwned reference\nSet the <code>ascii</code> flag of the <code>PyASCIIObject</code> state bitfield.\nSet the <code>compact</code> flag of the <code>PyASCIIObject</code> state bitfield.\nSet the <code>interned</code> field of the <code>PyASCIIObject</code> state bitfield.\nSet the <code>kind</code> field of the <code>PyASCIIObject</code> state bitfield.\nA bit field with various properties.\nSafety\nSafety\nRepresents the PyMemberDef structure.\nGets the Python builtin value <code>Ellipsis</code>, or <code>...</code>.\nGets the Python builtin value <code>None</code>.\nGets the Python builtin value <code>NotImplemented</code>.\nA marker token that represents holding the GIL.\nTypes that are safe to access while the GIL is not held.\nTemporarily releases the GIL, thus allowing other Python …\nUnsafely creates a Python token with an unbounded lifetime.\nLets the Python interpreter check and handle any pending …\nEvaluates a Python expression in the given context and …\nDeprecated name for <code>Python::eval</code>.\nReturns the argument unchanged.\nGets the Python type object for type <code>T</code>.\nDeprecated name for <code>Python::get_type</code>.\nImports the Python module with the specified name.\nDeprecated name for <code>Python::import</code>.\nCalls <code>U::from(self)</code>.\nExecutes one or more Python statements in the given …\nDeprecated name for <code>Python::run</code>.\nGets the running Python interpreter version as a string.\nGets the running Python interpreter version as a struct …\nAcquires the global interpreter lock, allowing access to …\nLike <code>Python::with_gil</code> except Python interpreter state …\nThe current version of the marshal binary format.\nSerialize an object to bytes using the Python built-in …\nDeprecated form of <code>dumps</code>.\nDeserialize an object from bytes using the Python built-in …\nDeprecated form of <code>loads</code>.\nThe exception raised when Rust code called from Python …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>PyErr</code> of this type.\nA borrowed equivalent to <code>Bound</code>.\nA GIL-attached equivalent to <code>Py&lt;T&gt;</code>.\nContains the error value\nContains the success value\nA GIL-independent reference to an object allocated on the …\nThis trait represents the Python APIs which are usable on …\nImplementation of functionality for <code>PyBool</code>.\nImplementation of functionality for <code>PyByteArray</code>.\nImplementation of functionality for <code>PyBytes</code>.\nImplementation of functionality for <code>PyCapsule</code>.\nImplementation of functionality for <code>PyComplex</code>.\nImplementation of functionality for <code>PyDict</code>.\nRepresents a Python exception.\nImplementation of functionality for <code>PyFloat</code>.\nImplementation of functionality for <code>PyFrozenSet</code>.\nImplementation of functionality for <code>PyList</code>.\nImplementation of functionality for <code>PyMapping</code>.\nImplementation of functionality for <code>PyMappingProxy</code>.\nImplementation of functionality for <code>PyModule</code>.\nA commonly-used alias for <code>Py&lt;PyAny&gt;</code>.\nRepresents the result of a Python call.\nImplementation of functionality for <code>PySequence</code>.\nImplementation of functionality for <code>PySet</code>.\nImplementation of functionality for <code>PySlice</code>.\nImplementation of functionality for <code>PyString</code>.\nImplementation of functionality for <code>PyTraceback</code>.\nImplementation of functionality for <code>PyTuple</code>.\nImplementation of functionality for <code>PyType</code>.\nImplementation of functionality for <code>PyWeakref</code>.\nComputes the absolute of self.\nReturns <code>|self|</code>.\nComputes <code>self + other</code>.\nAdds an attribute to the module.\nAdds an element to the set.\nAdds a new class to the module.\nAdd a function to a module.\nAdds a submodule to a module.\nAdds a function or a (sub)module to a module, using the …\nAppends an item to the list.\nExtracts a slice of the <code>ByteArray</code>’s entire buffer.\nGets the Python string as a byte slice.\nExtracts a mutable slice of the <code>ByteArray</code>’s entire …\nReturns <code>self</code> cast as a <code>PyMapping</code>.\nReturns <code>self</code> cast as a <code>PyMapping</code>.\nReturns <code>self</code> cast as a <code>PySequence</code>.\nReturns <code>self</code> cast as a <code>PySequence</code>.\nReturns <code>self</code> as a slice of objects.\nRetrieves the underlying FFI pointer associated with this …\nReturn Python bases\nComputes <code>self &amp; other</code>.\nComputes <code>~self</code>.\nComputes <code>self | other</code>.\nComputes <code>self ^ other</code>.\nCalls the object.\nCalls the object without arguments.\nCalls the object with only positional arguments.\nCalls a method on the object.\nCalls a method on the object without arguments.\nCalls a method on the object with only positional …\nEmpties an existing dictionary of all key-value pairs.\nRemoves all elements from the set.\nReturns an <code>Ordering</code> between <code>self</code> and <code>other</code>.\nReturns the concatenation of <code>self</code> and <code>other</code>.\nDetermines if self contains <code>value</code>.\nDetermines if the dictionary contains the specified key.\nDetermines if the set contains the specified key.\nDetermines if self contains <code>value</code>.\nDetermines if the mapping contains the specified key.\nDetermines if self contains <code>value</code>.\nDetermines if the set contains the specified key.\nDetermines if self contains <code>value</code>.\nGets the current context stored in the capsule. If there …\nReturns a new dictionary that contains the same key-value …\nReturns the number of occurrences of <code>value</code> in self, that …\nGets the start of the buffer containing the contents of …\nObtains the raw data backing the Python string.\nDeletes an item from the collection.\nDeletes an item.\nDeletes the <code>index</code>th element of self.\nDeletes the item with key <code>key</code>.\nDeletes the <code>i</code>th element of self.\nDeletes the slice from <code>low</code> to <code>high</code> from <code>self</code>.\nDeletes the slice from <code>i1</code> to <code>i2</code> from <code>self</code>.\nDeletes an attribute.\nReturns the module’s <code>__dict__</code> attribute, which contains …\nReturns the list of attributes of this object.\nRemoves the element from the set if it is present.\nComputes <code>self / other</code>.\nComputes <code>divmod(self, other)</code>.\nDowncast this <code>PyAny</code> to a concrete Python type or pyclass.\nDowncast this <code>PyAny</code> to a concrete Python type or pyclass …\nLike <code>downcast</code> but takes ownership of <code>self</code>.\nLike <code>downcast_exact</code> but takes ownership of <code>self</code>.\nLike <code>downcast_unchecked</code> but takes ownership of <code>self</code>.\nConverts this <code>PyAny</code> to a concrete Python type without …\nEncodes this string as a Python <code>bytes</code> object, using UTF-8 …\nTests whether this object is equal to another.\nExtracts some type from the Python object.\nReturns the filename (the <code>__file__</code> attribute) of the …\nComputes <code>self // other</code>.\nFormats the traceback as a string.\nGets the fully qualified name of the <code>PyType</code>.\nTests whether this object is greater than or equal to …\nLike <code>get_item</code>, but returns a borrowed object, which is a …\nLike <code>get_item_unchecked</code>, but returns a borrowed object, …\nGets an item from the collection.\nGets an item from the dictionary.\nGets the list item at the specified index.\nGets the item in self with key <code>key</code>.\nReturns the <code>index</code>th element of the Sequence.\nGets the tuple item at the specified index.\nGets the list item at the specified index. Undefined …\nGets the tuple item at the specified index. Undefined …\nReturns the reference count for the Python object.\nTakes the slice <code>self[low:high]</code> and returns it as a new …\nReturns the slice of sequence object between <code>begin</code> and <code>end</code>.\nTakes the slice <code>self[low:high]</code> and returns it as a new …\nReturns the Python type object for this object’s type.\nReturns the Python type pointer for this object.\nRetrieves an attribute value.\nRetrieves an attribute value optionally.\nDeclare whether or not this module supports running with …\nTests whether this object is greater than another.\nDetermines whether this object has the given attribute.\nRetrieves the hash code of self.\nReturns the imaginary part of the complex number.\nConcatenates <code>self</code> and <code>other</code>, in place if possible.\nRepeats the sequence object <code>count</code> times and updates <code>self</code>, …\nReturns the first index <code>i</code> for which <code>self[i] == value</code>.\nReturns the index (the <code>__all__</code> attribute) of the module, …\nReturns the first index <code>i</code> for which <code>self[i] == value</code>.\nReturns the first index <code>i</code> for which <code>self[i] == value</code>.\nRetrieves the start, stop, and step indices from the slice …\nInserts an item at the specified index.\nReturns <code>self</code> cast as a <code>PyMapping</code>.\nReturns <code>self</code> cast as a <code>PySequence</code>.\nReturns <code>self</code> cast as a <code>PySequence</code>.\nReturns whether <code>self</code> and <code>other</code> point to the same object. …\nDetermines whether this object appears callable.\nReturns whether the object is Ellipsis, e.g. <code>...</code>.\nReturns true if the sequence or mapping has a length of 0.\nChecks if the bytearray is empty.\nChecks if the dict is empty, i.e. <code>len(self) == 0</code>.\nChecks if the list is empty.\nReturns whether the mapping is empty.\nChecks if the mappingproxy is empty, i.e. <code>len(self) == 0</code>.\nReturns whether the sequence is empty.\nChecks if the tuple is empty.\nChecks whether this object is an instance of exactly type …\nChecks whether this object is an instance of exactly type <code>T</code>…\nChecks whether this object is an instance of type <code>ty</code>.\nChecks whether this object is an instance of type <code>T</code>.\nReturns whether the object is considered to be None.\nChecks whether <code>self</code> is a subclass of <code>other</code>.\nChecks whether <code>self</code> is a subclass of type <code>T</code>.\nGets whether this boolean is <code>true</code>.\nReturns whether the object is considered to be true.\nChecks if this is a valid capsule.\nReturns a list of dict items.\nReturns a list of all (key, value) pairs in the mapping.\nReturns a list of tuples of all (key, value) pairs in the …\nTakes an object and returns an iterator for it.\nReturns an iterator of <code>(key, value)</code> pairs in this …\nReturns an iterator of values in this set.\nReturns an iterator over this list’s items.\nReturns an iterator of values in this set.\nReturns an iterator over the tuple items.\nLike <code>iter</code>, but produces an iterator which returns borrowed …\nReturns a list of dict keys.\nReturns a list containing all keys in the mapping.\nReturns a list containing all keys in the mapping.\nTests whether this object is less than or equal to another.\nReturns the length of the sequence or mapping.\nGets the length of the bytearray.\nReturn the number of items in the dictionary.\nReturns the number of items in the set.\nReturns the length of the list.\nReturns the number of objects in the mapping.\nReturns the number of objects in sequence.\nReturns the number of items in the set.\nGets the length of the tuple.\nIterates over the contents of this dictionary while …\nIterates over the contents of this list while holding a …\nComputes <code>self &lt;&lt; other</code>.\nTests whether this object is less than another.\nComputes <code>self @ other</code>.\nGets the name of the module defining the <code>PyType</code>.\nReturn the method resolution order for this type.\nComputes <code>self * other</code>.\nRetrieves the name of this capsule, if set.\nReturns the name (the <code>__name__</code> attribute) of the module.\nGets the name of the <code>PyType</code>. Equivalent to <code>self.__name__</code> …\nTests whether this object is not equal to another.\nComputes the negative of self.\nGets the raw <code>c_void</code> pointer to the value in this capsule.\nRemoves and returns an arbitrary element from the set.\nComputes the positive of self.\nComputes <code>self ** other % modulus</code> (<code>pow(self, other, modulus)</code>…\nReturns <code>self</code> raised to the power of <code>other</code>.\nReturn a proxy object that delegates method calls to a …\nA proc macro used to expose Rust functions to Python.\nA proc macro used to expose methods to Python.\nA proc macro used to implement Python modules.\nGets the qualified name of the <code>PyType</code>. Equivalent to …\nReturns the real part of the complex number.\nObtains a reference to the value of this capsule.\nComputes <code>self % other</code>.\nReturns the result of repeating a sequence object <code>count</code> …\nComputes the “repr” representation of self.\nResizes the bytearray object to the new length <code>len</code>.\nReverses the list in-place. Equivalent to the Python …\nTests whether two Python objects obey a given <code>CompareOp</code>.\nComputes <code>self &gt;&gt; other</code>.\nSets the context pointer in the capsule.\nSets a collection item value.\nSets an item value.\nSets the item at the specified index.\nSets the item in self with key <code>key</code>.\nAssigns object <code>item</code> to the <code>i</code>th element of self.\nAssigns the sequence <code>seq</code> to the slice of <code>self</code> from <code>low</code> to …\nAssigns the sequence <code>v</code> to the slice of <code>self</code> from <code>i1</code> to <code>i2</code>.\nSets an attribute value.\nSorts the list in-place. Equivalent to the Python …\nComputes the “str” representation of self.\nComputes <code>self - other</code>.\nConverts the <code>PyString</code> into a Rust string, avoiding copying …\nReturns a fresh list based on the Sequence.\nReturn a new list containing the contents of this tuple; …\nGets the Python string as a Rust UTF-8 string slice.\nConverts the <code>PyString</code> into a Rust string.\nReturn a new tuple containing the contents of the list; …\nReturns a fresh tuple based on the Sequence.\nCopies the contents of the bytearray to a Rust vector.\nTakes an object and returns an iterator for it. Returns an …\nTakes an object and returns an iterator for it. Returns an …\nUpdate this dictionary with the key/value pairs from …\nAdd key/value pairs from another dictionary to this one …\nUpgrade the weakref to a Bound <code>PyAny</code> reference to the …\nGets the value of this float.\nReturns a list of dict values.\nReturns a list containing all values in the mapping.\nReturns a list containing all values in the mapping.\nWraps a Rust function annotated with <code>#[pyfunction]</code>.\nWraps a Rust function annotated with <code>#[pyfunction]</code>.\nA wrapper around <code>[u8]</code> where the storage is either owned by …\nA wrapper around <code>str</code> where the storage is owned by a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn error type returned by <code>Bound::try_borrow</code>.\nAn error type returned by <code>Bound::try_borrow_mut</code>.\nA wrapper type for an immutably borrowed value from a […\nA wrapper type for a mutably borrowed value from a […\nReturns the raw FFI pointer represented by self.\nReturns the raw FFI pointer represented by self.\nBorrows a shared reference to <code>PyRef&lt;T::BaseType&gt;</code>.\nBorrows a mutable reference to <code>PyRefMut&lt;T::BaseType&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an owned raw FFI pointer represented by self.\nReturns an owned raw FFI pointer represented by self.\nGets a <code>PyRef&lt;T::BaseType&gt;</code>.\nGets a <code>PyRef&lt;T::BaseType&gt;</code>.\nReturns a <code>Python</code> token that is bound to the lifetime of …\nReturns a <code>Python</code> token that is bound to the lifetime of …\nOperators for the <code>__richcmp__</code> method\nThe equality operator.\nWhether the pyclass is frozen.\nThe <em>greater than or equal to</em> operator.\nThe <em>greater than</em> operator.\nThe <em>less than or equal to</em> operator.\nThe <em>less than</em> operator.\nThe <em>not equal to</em> operator.\nTypes that can be used as Python classes.\nError returned by a <code>__traverse__</code> visitor implementation.\nObject visitor for GC.\nVisit <code>obj</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConversion from the C enum.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns if a Rust <code>std::cmp::Ordering</code> matches this ordering …\nInitializer for our <code>#[pyclass]</code> system.\nConstructs a new initializer from an initializer for the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructs a new initializer from value <code>T</code> and base class’…\nA write-once primitive similar to <code>std::sync::OnceLock&lt;T&gt;</code>.\nValue with concurrent access protected by the GIL.\nExtension trait for <code>std::sync::Mutex</code> which helps avoid …\nHelper trait for <code>Once</code> to help avoid deadlocking when using …\nExtension trait for <code>std::sync::OnceLock</code> which helps avoid …\nSimilar to <code>call_once_force</code>, but releases the Python GIL …\nSimilar to <code>call_once</code>, but releases the Python GIL …\nCreates a new cell that contains a new Python reference to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGain access to the inner value by giving proof of having …\nGet a reference to the contained value, or <code>None</code> if the …\nGet the contents of the cell mutably. This is only …\nGet a reference to the contained value, initializing it if …\nInitializes this <code>OnceLock</code> with the given closure if it has …\nLike <code>get_or_init</code>, but accepts a fallible initialization …\nGet a reference to the contained Python type, initializing …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the cell, returning the wrapped value.\nLock this <code>Mutex</code> in a manner that cannot deadlock with the …\nPlace the given value under the protection of the GIL.\nCreate a <code>GILOnceCell</code> which does not yet contain a value.\nSet the value in the cell.\nTakes the value out of the cell, moving it back to an …\nGain access to the inner value by giving proof that …\nExecutes a closure with a Python critical section held on …\nExecutes a closure with a Python critical section held on …\nModule name, if any.\nClass name.\nName of self. This is used in error messages, for example.\n<code>T: PyLayout&lt;U&gt;</code> represents that <code>T</code> is a concrete …\n<code>T: PySizedLayout&lt;U&gt;</code> represents that <code>T</code> is not a instance of …\nImplemented by types which can be used as a concrete …\nPython type information. All Python native types (e.g., …\nChecks if <code>object</code> is an instance of this type.\nDeprecated name for <code>PyTypeInfo::is_exact_type_of</code>.\nChecks if <code>object</code> is an instance of this type or a subclass …\nDeprecated name for <code>PyTypeInfo::is_type_of</code>.\nChecks if <code>object</code> is an instance of <code>Self</code>, which may include …\nReturns the safe abstraction over the type object.\nDeprecated name for <code>PyTypeInfo::type_object</code>.\nReturns the PyTypeObject instance for this type.\nPython objects that have a base type.\nConversion trait that allows a sequence of tuples to be …\nRepresents any Python object.\nThis trait represents the Python APIs which are usable on …\nRepresents a Python <code>bool</code>.\nImplementation of functionality for <code>PyBool</code>.\nRepresents a Python <code>bytearray</code>.\nImplementation of functionality for <code>PyByteArray</code>.\nRepresents a Python <code>bytes</code> object.\nImplementation of functionality for <code>PyBytes</code>.\nRepresents a builtin Python function object.\nRepresents a Python Capsule as described in Capsules:\nImplementation of functionality for <code>PyCapsule</code>.\nRepresents a Python code object.\nRepresents a Python <code>complex</code> object.\nImplementation of functionality for <code>PyComplex</code>.\nBindings around <code>datetime.date</code>.\nTrait for accessing the date components of a struct …\nBindings for <code>datetime.datetime</code>.\nBindings for <code>datetime.timedelta</code>.\nTrait for accessing the components of a struct containing …\nRepresents a Python <code>dict</code>.\nRepresents a Python <code>dict_items</code>.\nRepresents a Python <code>dict_keys</code>.\nImplementation of functionality for <code>PyDict</code>.\nRepresents a Python <code>dict_values</code>.\nRepresents the Python <code>Ellipsis</code> object.\nRepresents a Python <code>float</code> object.\nImplementation of functionality for <code>PyFloat</code>.\nRepresents a Python frame.\nRepresents a  Python <code>frozenset</code>.\nAllows building a Python <code>frozenset</code> one item at a time\nImplementation of functionality for <code>PyFrozenSet</code>.\nRepresents a Python function object.\nRepresents a Python <code>types.GenericAlias</code> object.\nRepresents a Python <code>int</code> object.\nA Python iterator object.\nRepresents a Python <code>list</code>.\nImplementation of functionality for <code>PyList</code>.\nDeprecated alias for <code>PyInt</code>.\nRepresents a reference to a Python object supporting the …\nImplementation of functionality for <code>PyMapping</code>.\nRepresents a Python <code>mappingproxy</code>.\nRepresents a Python <code>memoryview</code>.\nRepresents a Python <code>module</code> object.\nImplementation of functionality for <code>PyModule</code>.\nRepresents the Python <code>None</code> object.\nRepresents the Python <code>NotImplemented</code> object.\nRepresents a reference to a Python object supporting the …\nImplementation of functionality for <code>PySequence</code>.\nRepresents a Python <code>set</code>.\nImplementation of functionality for <code>PySet</code>.\nRepresents a Python <code>slice</code>.\nReturn value from <code>PySliceMethods::indices</code>.\nImplementation of functionality for <code>PySlice</code>.\nRepresents a Python <code>string</code> (a Unicode string object).\nRepresents raw data backing a Python <code>str</code>.\nImplementation of functionality for <code>PyString</code>.\nRepresents a Python <code>super</code> object.\nBindings for <code>datetime.time</code>.\nTrait for accessing the time components of a struct …\nRepresents a Python traceback.\nImplementation of functionality for <code>PyTraceback</code>.\nRepresents a Python <code>tuple</code> object.\nImplementation of functionality for <code>PyTuple</code>.\nRepresents a reference to a Python <code>type</code> object.\nImplementation of functionality for <code>PyType</code>.\nBindings for <code>datetime.tzinfo</code>.\nTrait for accessing the components of a struct containing …\nDeprecated alias for <code>PyString</code>.\nRepresents any Python <code>weakref</code> reference.\nImplementation of functionality for <code>PyWeakref</code>.\nRepresents any Python <code>weakref</code> Proxy type.\nRepresents a Python <code>weakref.ReferenceType</code>.\nUCS1 representation.\nUCS2 representation.\nUCS4 representation.\nComputes the absolute of self.\nReturns <code>|self|</code>.\nComputes <code>self + other</code>.\nAdds an attribute to the module.\nAdds an element to the set.\nAdds an element to the set.\nAdds a new class to the module.\nAdd a function to a module.\nAdds a submodule to a module.\nAdds a function or a (sub)module to a module, using the …\nAppends an item to the list.\nExtracts a slice of the <code>ByteArray</code>’s entire buffer.\nGets the Python string as a byte slice.\nObtain the raw bytes backing this instance as a u8 slice.\nExtracts a mutable slice of the <code>ByteArray</code>’s entire …\nReturns <code>self</code> cast as a <code>PyMapping</code>.\nReturns <code>self</code> cast as a <code>PySequence</code>.\nReturns <code>self</code> cast as a <code>PySequence</code>.\nReturns <code>self</code> as a slice of objects.\nRetrieves the underlying FFI pointer associated with this …\nReturn Python bases\nComputes <code>self &amp; other</code>.\nComputes <code>~self</code>.\nComputes <code>self | other</code>.\nComputes <code>self ^ other</code>.\nDeprecated name for <code>PyBytes::from_ptr</code>.\nCalls the object.\nCalls the object without arguments.\nCalls the object with only positional arguments.\nCalls a method on the object.\nCalls a method on the object without arguments.\nCalls a method on the object with only positional …\nEmpties an existing dictionary of all key-value pairs.\nRemoves all elements from the set.\nReturns an <code>Ordering</code> between <code>self</code> and <code>other</code>.\nReturns the concatenation of <code>self</code> and <code>other</code>.\nDetermines if self contains <code>value</code>.\nDetermines if the dictionary contains the specified key.\nDetermines if the set contains the specified key.\nDetermines if self contains <code>value</code>.\nDetermines if the mapping contains the specified key.\nDetermines if self contains <code>value</code>.\nDetermines if the set contains the specified key.\nDetermines if self contains <code>value</code>.\nGets the current context stored in the capsule. If there …\nReturns a new dictionary that contains the same key-value …\nReturns the number of occurrences of <code>value</code> in self, that …\nGets the start of the buffer containing the contents of …\nObtains the raw data backing the Python string.\nDeletes an item from the collection.\nDeletes an item.\nDeletes the <code>index</code>th element of self.\nDeletes the item with key <code>key</code>.\nDeletes the <code>i</code>th element of self.\nDeletes the slice from <code>low</code> to <code>high</code> from <code>self</code>.\nDeletes the slice from <code>i1</code> to <code>i2</code> from <code>self</code>.\nDeletes an attribute.\nReturns the module’s <code>__dict__</code> attribute, which contains …\nReturns the list of attributes of this object.\nRemoves the element from the set if it is present.\nComputes <code>self / other</code>.\nComputes <code>divmod(self, other)</code>.\nDowncast this <code>PyAny</code> to a concrete Python type or pyclass.\nDowncast this <code>PyAny</code> to a concrete Python type or pyclass …\nLike <code>downcast</code> but takes ownership of <code>self</code>.\nLike <code>downcast_exact</code> but takes ownership of <code>self</code>.\nLike <code>downcast_unchecked</code> but takes ownership of <code>self</code>.\nConverts this <code>PyAny</code> to a concrete Python type without …\nCreates a new empty frozen set\nConstructs a new empty list.\nCreates a new empty set.\nConstructs an empty tuple (on the Python side, a singleton …\nDeprecated name for <code>PyFrozenSet::empty</code>.\nDeprecated name for <code>PyList::empty</code>.\nDeprecated name for <code>PySet::empty</code>.\nDeprecated name for <code>PyTuple::empty</code>.\nEncodes this string as a Python <code>bytes</code> object, using UTF-8 …\nTests whether this object is equal to another.\nExtracts some type from the Python object.\nReturns the filename (the <code>__file__</code> attribute) of the …\nFinish building the set and take ownership of its current …\nDeprecated name for <code>PyFrozenSetBuilder::finalize</code>.\nComputes <code>self // other</code>.\nFormats the traceback as a string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new Python <code>bytearray</code> object from another Python …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new Python <code>memoryview</code> object from another Python …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts the given FFI pointer into <code>Bound&lt;PyType&gt;</code>, to use …\nDeprecated name for <code>PyByteArray::from</code>.\nDeprecated name for <code>PyMemoryView::from</code>.\nDeprecated name for <code>PyIterator::from_object</code>.\nCreates and loads a module named <code>module_name</code>, containing …\nDeprecated name for <code>PyModule::from_code</code>.\nCreates a new <code>PyComplex</code> from the given real and imaginary …\nDeprecated name for <code>PyComplex::from_doubles</code>.\nBuilds an iterator for an iterable Python object; the …\nAttempts to create a Python string from a Python …\nDeprecated name for <code>PyString::from_object</code>.\nCreates a new Python byte string object from a raw pointer …\nCreates a new dictionary from the sequence given.\nDeprecated name for <code>PyDict::from_sequence</code>.\nConstruct a <code>datetime.date</code> from a POSIX timestamp\nConstruct a <code>datetime</code> object from a POSIX timestamp\nDeprecated name for <code>PyDate::from_timestamp</code>.\nDeprecated name for <code>PyDateTime::from_timestamp</code>.\nConstructs a new full slice that is equivalent to <code>::</code>.\nDeprecated name for <code>PySlice::full</code>.\nGets the fully qualified name of the <code>PyType</code>.\nTests whether this object is greater than or equal to …\nReturns the <code>Ellipsis</code> object.\nReturns the <code>None</code> object.\nReturns the <code>NotImplemented</code> object.\nLike <code>get_item</code>, but returns a borrowed object, which is a …\nLike <code>get_item_unchecked</code>, but returns a borrowed object, …\nDeprecated name for <code>PyEllipsis::get</code>.\nDeprecated name for <code>PyNone::get</code>.\nDeprecated name for <code>PyNotImplemented::get</code>.\nReturns the day, as an int from 1 through 31.\nReturns the number of days, as an int from -999999999 to …\nReturns whether this date is the later of two moments with …\nReturns the hour, as an int from 0 through 23.\nGets an item from the collection.\nGets an item from the dictionary.\nGets the list item at the specified index.\nGets the item in self with key <code>key</code>.\nReturns the <code>index</code>th element of the Sequence.\nGets the tuple item at the specified index.\nGets the list item at the specified index. Undefined …\nGets the tuple item at the specified index. Undefined …\nReturns the microsecond, as an int from 0 through 999999.\nReturns the number of microseconds, as an int from 0 …\nReturns the minute, as an int from 0 through 59.\nReturns the month, as an int from 1 through 12.\nRetrieve to a Bound object pointed to by the weakref.\nRetrieve to a Bound object pointed to by the weakref.\nRetrieve to a Bound object pointed to by the weakref.\nReturns the reference count for the Python object.\nReturns the second, as an int from 0 through 59.\nReturns the number of seconds, as an int from 0 through …\nTakes the slice <code>self[low:high]</code> and returns it as a new …\nReturns the slice of sequence object between <code>begin</code> and <code>end</code>.\nTakes the slice <code>self[low:high]</code> and returns it as a new …\nReturns the Python type object for this object’s type.\nReturns the Python type pointer for this object.\nReturns the tzinfo (which may be None).\nDeprecated name for <code>PyTzInfoAccess::get_tzinfo</code>.\nDeprecated name for <code>PyTzInfoAccess::get_tzinfo</code>.\nReturns the year, as a positive int.\nRetrieves an attribute value.\nRetrieves an attribute value optionally.\nDeclare whether or not this module supports running with …\nTests whether this object is greater than another.\nDetermines whether this object has the given attribute.\nRetrieves the hash code of self.\nReturns the imaginary part of the complex number.\nImports an existing capsule.\nImports the Python module with the specified name.\nDeprecated name for <code>PyModule::import</code>.\nConcatenates <code>self</code> and <code>other</code>, in place if possible.\nRepeats the sequence object <code>count</code> times and updates <code>self</code>, …\nReturns the first index <code>i</code> for which <code>self[i] == value</code>.\nReturns the index (the <code>__all__</code> attribute) of the module, …\nReturns the first index <code>i</code> for which <code>self[i] == value</code>.\nReturns the first index <code>i</code> for which <code>self[i] == value</code>.\nRetrieves the start, stop, and step indices from the slice …\nInserts an item at the specified index.\nIntern the given string\nDeprecated name for <code>PyString::intern</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>self</code> cast as a <code>PyMapping</code>.\nConverts self into a <code>PyDict</code> object pointer. Whether …\nDeprecated name for <code>IntoPyDict::into_py_dict</code>.\nDeprecated name for <code>IntoPyDict::into_py_dict</code>.\nReturns <code>self</code> cast as a <code>PySequence</code>.\nReturns <code>self</code> cast as a <code>PySequence</code>.\nReturns whether <code>self</code> and <code>other</code> point to the same object. …\nDetermines whether this object appears callable.\nReturns whether the object is Ellipsis, e.g. <code>...</code>.\nReturns true if the sequence or mapping has a length of 0.\nChecks if the bytearray is empty.\nChecks if the dict is empty, i.e. <code>len(self) == 0</code>.\nChecks if the list is empty.\nReturns whether the mapping is empty.\nReturns whether the sequence is empty.\nChecks if the tuple is empty.\nChecks if set is empty.\nChecks if set is empty.\nChecks if set is empty.\nChecks if set is empty.\nChecks if set is empty.\nChecks if set is empty.\nChecks whether this object is an instance of exactly type …\nChecks whether this object is an instance of exactly type <code>T</code>…\nChecks whether this object is an instance of type <code>ty</code>.\nChecks whether this object is an instance of type <code>T</code>.\nReturns whether the object is considered to be None.\nChecks whether <code>self</code> is a subclass of <code>other</code>.\nChecks whether <code>self</code> is a subclass of type <code>T</code>.\nGets whether this boolean is <code>true</code>.\nReturns whether the object is considered to be true.\nChecks if this is a valid capsule.\nReturns a list of dict items.\nReturns a list of all (key, value) pairs in the mapping.\nIteration over Python collections.\nTakes an object and returns an iterator for it.\nReturns an iterator of <code>(key, value)</code> pairs in this …\nReturns an iterator of values in this set.\nReturns an iterator over this list’s items.\nReturns an iterator of values in this set.\nReturns an iterator over the tuple items.\nLike <code>iter</code>, but produces an iterator which returns borrowed …\nReturns a list of dict keys.\nReturns a list containing all keys in the mapping.\nTests whether this object is less than or equal to another.\nReturns the length of the sequence or mapping.\nGets the length of the bytearray.\nReturn the number of items in the dictionary.\nReturns the number of items in the set.\nReturns the length of the list.\nReturns the number of objects in the mapping.\nReturns the number of objects in sequence.\nReturns the number of items in the set.\nGets the length of the tuple.\nIterates over the contents of this dictionary while …\nIterates over the contents of this list while holding a …\nComputes <code>self &lt;&lt; other</code>.\nTests whether this object is less than another.\nComputes <code>self @ other</code>.\nGets the name of the module defining the <code>PyType</code>.\nReturn the method resolution order for this type.\nComputes <code>self * other</code>.\nRetrieves the name of this capsule, if set.\nReturns the name (the <code>__name__</code> attribute) of the module.\nGets the name of the <code>PyType</code>. Equivalent to <code>self.__name__</code> …\nTests whether this object is not equal to another.\nComputes the negative of self.\nDepending on <code>val</code>, returns <code>true</code> or <code>false</code>.\nCreates a new Python bytearray object.\nCreates a new Python bytestring object. The bytestring is …\nConstructs a new capsule whose contents are <code>value</code>, …\nCreates a new <code>datetime.date</code>.\nCreates a new <code>datetime.datetime</code> object.\nCreates a new <code>datetime.time</code> object.\nCreates a new <code>timedelta</code>.\nCreates a new empty dictionary.\nCreates a new Python <code>float</code> object.\nCreate a new <code>FrozenSetBuilder</code>. Since this allocates a …\nCreates a new frozenset.\nCreate a new built-in function which takes no arguments.\nCreates a new Python GenericAlias object.\nConstructs a new list with the given elements.\nCreates a mappingproxy from an object.\nCreates a new module object with the <code>__name__</code> attribute …\nCreates a new Python int object.\nConstructs a new super object. More read about super …\nCreates a new set with elements from the given slice.\nConstructs a new slice with the given elements.\nCreates a new Python string object.\nConstructs a new tuple with the given elements.\nCreates a new type object.\nConstructs a new Weak Reference (<code>weakref.proxy</code>/…\nConstructs a new Weak Reference (<code>weakref.ref</code>/…\nCreates a new <code>PySliceIndices</code>.\nDeprecated name for <code>PyBool::new</code>.\nDeprecated name for <code>PyByteArray::new</code>.\nDeprecated name for <code>PyBytes::new</code>.\nDeprecated name for <code>PyCapsule::new</code>.\nDeprecated name for <code>PyDate::new</code>.\nDeprecated name for <code>PyDateTime::new</code>.\nDeprecated name for <code>PyTime::new</code>.\nDeprecated name for <code>PyDelta::new</code>.\nDeprecated name for <code>PyDict::new</code>.\nDeprecated name for <code>PyFloat::new</code>.\nDeprecated name for <code>PyFrozenSet::new</code>.\nDeprecated name for <code>PyCFunction::new</code>.\nDeprecated name for <code>PyList::new</code>.\nDeprecated name for <code>PyModule::new</code>.\nDeprecated name for <code>PySuper::new</code>.\nDeprecated name for <code>PySet::new</code>.\nDeprecated name for <code>PySlice::new</code>.\nDeprecated name for <code>PyString::new</code>.\nDeprecated name for <code>PyTuple::new</code>.\nDeprecated name for <code>PyType::new</code>.\nDeprecated name for <code>PyWeakrefProxy::new</code>.\nDeprecated name for <code>PyWeakrefReference::new</code>.\nDeprecated name for <code>PyByteArray::new_with</code>.\nDeprecated name for <code>PyBytes::new_with</code>.\nDeprecated name for <code>PyWeakrefProxy::new_with</code>.\nDeprecated name for <code>PyWeakrefReference::new_with</code>.\nDeprecated name for <code>PyCapsule::new_with_destructor</code>.\nDeprecated name for <code>PyDateTime::new_with_fold</code>.\nDeprecated name for <code>PyTime::new_with_fold</code>.\nCreate a new function from a closure.\nDeprecated name for <code>PyCFunction::new_closure</code>.\nCreates a new Python <code>bytearray</code> object with an <code>init</code> closure …\nCreates a new Python <code>bytes</code> object with an <code>init</code> closure to …\nConstructs a new Weak Reference (<code>weakref.proxy</code>/…\nConstructs a new Weak Reference (<code>weakref.ref</code>/…\nConstructs a new capsule whose contents are <code>value</code>, …\nAlternate constructor that takes a <code>fold</code> parameter. A <code>true</code> …\nAlternate constructor that takes a <code>fold</code> argument. See …\nCreate a new built-in function with keywords (*args and/or …\nDeprecated name for <code>PyCFunction::new_with_keywords</code>.\nGets the raw <code>c_void</code> pointer to the value in this capsule.\nRemoves and returns an arbitrary element from the set.\nComputes the positive of self.\nComputes <code>self ** other % modulus</code> (<code>pow(self, other, modulus)</code>…\nReturns <code>self</code> raised to the power of <code>other</code>.\nReturn a proxy object that delegates method calls to a …\nGets the qualified name of the <code>PyType</code>. Equivalent to …\nReturns the real part of the complex number.\nObtains a reference to the value of this capsule.\nRegister a pyclass as a subclass of <code>collections.abc.Mapping</code>…\nRegister a pyclass as a subclass of …\nComputes <code>self % other</code>.\nReturns the result of repeating a sequence object <code>count</code> …\nComputes the “repr” representation of self.\nResizes the bytearray object to the new length <code>len</code>.\nReverses the list in-place. Equivalent to the Python …\nTests whether two Python objects obey a given <code>CompareOp</code>.\nComputes <code>self &gt;&gt; other</code>.\nSets the context pointer in the capsule.\nSets a collection item value.\nSets an item value.\nSets the item at the specified index.\nSets the item in self with key <code>key</code>.\nAssigns object <code>item</code> to the <code>i</code>th element of self.\nAssigns the sequence <code>seq</code> to the slice of <code>self</code> from <code>low</code> to …\nAssigns the sequence <code>v</code> to the slice of <code>self</code> from <code>i1</code> to <code>i2</code>.\nSets an attribute value.\nThe length of the slice calculated from the original input …\nSorts the list in-place. Equivalent to the Python …\nStart of the slice\nIncrement to use when iterating the slice from <code>start</code> to …\nEnd of the slice\nComputes the “str” representation of self.\nComputes <code>self - other</code>.\nEquivalent to <code>datetime.timezone.utc</code>\nDeprecated name for <code>timezone_utc</code>.\nConverts the <code>PyString</code> into a Rust string, avoiding copying …\nReturns a fresh list based on the Sequence.\nReturn a new list containing the contents of this tuple; …\nGets the Python string as a Rust UTF-8 string slice.\nConvert the raw data to a Rust string.\nConverts the <code>PyString</code> into a Rust string.\nConvert the raw data to a Rust string, possibly with data …\nReturn a new tuple containing the contents of the list; …\nReturns a fresh tuple based on the Sequence.\nCopies the contents of the bytearray to a Rust vector.\nTakes an object and returns an iterator for it. Returns an …\nUpdate this dictionary with the key/value pairs from …\nAdd key/value pairs from another dictionary to this one …\nUpgrade the weakref to a Bound <code>PyAny</code> reference to the …\nUpgrade the weakref to a direct Bound object reference.\nUpgrade the weakref to a direct Bound object reference.\nUpgrade the weakref to a direct Bound object reference.\nUpgrade the weakref to a exact direct Bound object …\nUpgrade the weakref to a exact direct Bound object …\nUpgrade the weakref to a exact direct Bound object …\nUpgrade the weakref to a direct Bound object reference …\nUpgrade the weakref to a direct Bound object reference …\nUpgrade the weakref to a direct Bound object reference …\nGets the value of this float.\nSize in bytes of each value/item in the underlying slice.\nReturns a list of dict values.\nReturns a list containing all values in the mapping.\nUsed by <code>PyTuple::iter_borrowed()</code>.\nPyO3 implementation of an iterator for a Python <code>dict</code> …\nPyO3 implementation of an iterator for a Python <code>frozenset</code> …\nUsed by <code>PyList::iter()</code>.\nPyO3 implementation of an iterator for a Python <code>set</code> object.\nUsed by <code>PyTuple::into_iter()</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdvances the iterator and returns the next value.\nAdvances the iterator and returns the next value.")