(function() {
    var type_impls = Object.fromEntries([["pyo3",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPyPointer-for-Py%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1799-1805\">Source</a><a href=\"#impl-AsPyPointer-for-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"pyo3/conversion/trait.AsPyPointer.html\" title=\"trait pyo3::conversion::AsPyPointer\">AsPyPointer</a> for <a class=\"struct\" href=\"pyo3/struct.Py.html\" title=\"struct pyo3::Py\">Py</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1802-1804\">Source</a><a href=\"#method.as_ptr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"pyo3/conversion/trait.AsPyPointer.html#tymethod.as_ptr\" class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.pointer.html\">*mut </a><a class=\"struct\" href=\"pyo3/ffi/struct.PyObject.html\" title=\"struct pyo3::ffi::PyObject\">PyObject</a></h4></section></summary><div class=\"docblock\"><p>Gets the underlying FFI pointer, returns a borrowed pointer.</p>\n</div></details></div></details>","AsPyPointer","pyo3::instance::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Py%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1913-1917\">Source</a><a href=\"#impl-Debug-for-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"pyo3/struct.Py.html\" title=\"struct pyo3::Py\">Py</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1914-1916\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.85.1/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","pyo3::instance::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-Py%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1904-1911\">Source</a><a href=\"#impl-Display-for-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"struct\" href=\"pyo3/struct.Py.html\" title=\"struct pyo3::Py\">Py</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"pyo3/type_object/trait.PyTypeInfo.html\" title=\"trait pyo3::type_object::PyTypeInfo\">PyTypeInfo</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1908-1910\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.85.1/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","pyo3::instance::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-Py%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1875-1882\">Source</a><a href=\"#impl-Drop-for-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for <a class=\"struct\" href=\"pyo3/struct.Py.html\" title=\"struct pyo3::Py\">Py</a>&lt;T&gt;</h3><div class=\"docblock\"><p>Dropping a <code>Py</code> instance decrements the reference count\non the object by one if the GIL is held.</p>\n</div></section></summary><div class=\"docblock\"><p>Otherwise and by default, this registers the underlying pointer to have its reference count\ndecremented the next time PyO3 acquires the GIL.</p>\n<p>However, if the <code>pyo3_disable_reference_pool</code> conditional compilation flag\nis enabled, it will abort the process.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1877-1881\">Source</a><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","pyo3::instance::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBound%3C'_,+T%3E%3E-for-Py%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1827-1832\">Source</a><a href=\"#impl-From%3CBound%3C'_,+T%3E%3E-for-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"pyo3/struct.Bound.html\" title=\"struct pyo3::Bound\">Bound</a>&lt;'_, T&gt;&gt; for <a class=\"struct\" href=\"pyo3/struct.Py.html\" title=\"struct pyo3::Py\">Py</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1829-1831\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(other: <a class=\"struct\" href=\"pyo3/struct.Bound.html\" title=\"struct pyo3::Bound\">Bound</a>&lt;'_, T&gt;) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Bound<'_, T>>","pyo3::instance::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CPyRef%3C'a,+T%3E%3E-for-Py%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1834-1841\">Source</a><a href=\"#impl-From%3CPyRef%3C'a,+T%3E%3E-for-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"pyo3/pycell/struct.PyRef.html\" title=\"struct pyo3::pycell::PyRef\">PyRef</a>&lt;'a, T&gt;&gt; for <a class=\"struct\" href=\"pyo3/struct.Py.html\" title=\"struct pyo3::Py\">Py</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"pyo3/pyclass/trait.PyClass.html\" title=\"trait pyo3::pyclass::PyClass\">PyClass</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1838-1840\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(pyref: <a class=\"struct\" href=\"pyo3/pycell/struct.PyRef.html\" title=\"struct pyo3::pycell::PyRef\">PyRef</a>&lt;'a, T&gt;) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<PyRef<'a, T>>","pyo3::instance::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CPyRefMut%3C'a,+T%3E%3E-for-Py%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1843-1850\">Source</a><a href=\"#impl-From%3CPyRefMut%3C'a,+T%3E%3E-for-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"pyo3/pycell/struct.PyRefMut.html\" title=\"struct pyo3::pycell::PyRefMut\">PyRefMut</a>&lt;'a, T&gt;&gt; for <a class=\"struct\" href=\"pyo3/struct.Py.html\" title=\"struct pyo3::Py\">Py</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"pyo3/pyclass/trait.PyClass.html\" title=\"trait pyo3::pyclass::PyClass\">PyClass</a>&lt;Frozen = False&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1847-1849\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(pyref: <a class=\"struct\" href=\"pyo3/pycell/struct.PyRefMut.html\" title=\"struct pyo3::pycell::PyRefMut\">PyRefMut</a>&lt;'a, T&gt;) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<PyRefMut<'a, T>>","pyo3::instance::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromPyObject%3C'_%3E-for-Py%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1884-1892\">Source</a><a href=\"#impl-FromPyObject%3C'_%3E-for-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"pyo3/conversion/trait.FromPyObject.html\" title=\"trait pyo3::conversion::FromPyObject\">FromPyObject</a>&lt;'_&gt; for <a class=\"struct\" href=\"pyo3/struct.Py.html\" title=\"struct pyo3::Py\">Py</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"pyo3/type_object/trait.PyTypeCheck.html\" title=\"trait pyo3::type_object::PyTypeCheck\">PyTypeCheck</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extract_bound\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1889-1891\">Source</a><a href=\"#method.extract_bound\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"pyo3/conversion/trait.FromPyObject.html#tymethod.extract_bound\" class=\"fn\">extract_bound</a>(ob: &amp;<a class=\"struct\" href=\"pyo3/struct.Bound.html\" title=\"struct pyo3::Bound\">Bound</a>&lt;'_, <a class=\"struct\" href=\"pyo3/types/struct.PyAny.html\" title=\"struct pyo3::types::PyAny\">PyAny</a>&gt;) -&gt; <a class=\"type\" href=\"pyo3/type.PyResult.html\" title=\"type pyo3::PyResult\">PyResult</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Extracts <code>Self</code> from the source <code>PyObject</code>.</p>\n</div></details></div></details>","FromPyObject<'_>","pyo3::instance::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoPy%3CPy%3CPyAny%3E%3E-for-Py%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1755-1762\">Source</a><a href=\"#impl-IntoPy%3CPy%3CPyAny%3E%3E-for-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"pyo3/conversion/trait.IntoPy.html\" title=\"trait pyo3::conversion::IntoPy\">IntoPy</a>&lt;<a class=\"struct\" href=\"pyo3/struct.Py.html\" title=\"struct pyo3::Py\">Py</a>&lt;<a class=\"struct\" href=\"pyo3/types/struct.PyAny.html\" title=\"struct pyo3::types::PyAny\">PyAny</a>&gt;&gt; for <a class=\"struct\" href=\"pyo3/struct.Py.html\" title=\"struct pyo3::Py\">Py</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_py\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1759-1761\">Source</a><a href=\"#method.into_py\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"pyo3/conversion/trait.IntoPy.html#tymethod.into_py\" class=\"fn\">into_py</a>(self, _py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"pyo3/type.PyObject.html\" title=\"type pyo3::PyObject\">PyObject</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.23.0: <code>IntoPy</code> is going to be replaced by <code>IntoPyObject</code>. See the migration guide (https://pyo3.rs/v0.23.0/migration) for more information.</span></div></span></summary><div class=\"docblock\"><p>Converts a <code>Py</code> instance to <code>PyObject</code>.\nConsumes <code>self</code> without calling <code>Py_DECREF()</code>.</p>\n</div></details></div></details>","IntoPy<Py<PyAny>>","pyo3::instance::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoPyObject%3C'py%3E-for-Py%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/pyo3/conversion.rs.html#321-329\">Source</a><a href=\"#impl-IntoPyObject%3C'py%3E-for-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'py, T&gt; <a class=\"trait\" href=\"pyo3/conversion/trait.IntoPyObject.html\" title=\"trait pyo3::conversion::IntoPyObject\">IntoPyObject</a>&lt;'py&gt; for <a class=\"struct\" href=\"pyo3/struct.Py.html\" title=\"struct pyo3::Py\">Py</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/pyo3/conversion.rs.html#322\">Source</a><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"pyo3/conversion/trait.IntoPyObject.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = T</h4></section></summary><div class='docblock'>The Python output type</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/pyo3/conversion.rs.html#323\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"pyo3/conversion/trait.IntoPyObject.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"pyo3/struct.Bound.html\" title=\"struct pyo3::Bound\">Bound</a>&lt;'py, &lt;<a class=\"struct\" href=\"pyo3/struct.Py.html\" title=\"struct pyo3::Py\">Py</a>&lt;T&gt; as <a class=\"trait\" href=\"pyo3/conversion/trait.IntoPyObject.html\" title=\"trait pyo3::conversion::IntoPyObject\">IntoPyObject</a>&lt;'py&gt;&gt;::<a class=\"associatedtype\" href=\"pyo3/conversion/trait.IntoPyObject.html#associatedtype.Target\" title=\"type pyo3::conversion::IntoPyObject::Target\">Target</a>&gt;</h4></section></summary><div class='docblock'>The smart pointer type to use. <a href=\"pyo3/conversion/trait.IntoPyObject.html#associatedtype.Output\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/pyo3/conversion.rs.html#324\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"pyo3/conversion/trait.IntoPyObject.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_pyobject\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/pyo3/conversion.rs.html#326-328\">Source</a><a href=\"#method.into_pyobject\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"pyo3/conversion/trait.IntoPyObject.html#tymethod.into_pyobject\" class=\"fn\">into_pyobject</a>(self, py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'py&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"pyo3/conversion/trait.IntoPyObject.html#associatedtype.Output\" title=\"type pyo3::conversion::IntoPyObject::Output\">Output</a>, Self::<a class=\"associatedtype\" href=\"pyo3/conversion/trait.IntoPyObject.html#associatedtype.Error\" title=\"type pyo3::conversion::IntoPyObject::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","IntoPyObject<'py>","pyo3::instance::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Py%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1083-1109\">Source</a><a href=\"#impl-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"pyo3/struct.Py.html\" title=\"struct pyo3::Py\">Py</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"pyo3/pyclass/trait.PyClass.html\" title=\"trait pyo3::pyclass::PyClass\">PyClass</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1106-1108\">Source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/struct.Py.html#tymethod.new\" class=\"fn\">new</a>(\n    py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;,\n    value: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"pyo3/pyclass_init/struct.PyClassInitializer.html\" title=\"struct pyo3::pyclass_init::PyClassInitializer\">PyClassInitializer</a>&lt;T&gt;&gt;,\n) -&gt; <a class=\"type\" href=\"pyo3/type.PyResult.html\" title=\"type pyo3::PyResult\">PyResult</a>&lt;<a class=\"struct\" href=\"pyo3/struct.Py.html\" title=\"struct pyo3::Py\">Py</a>&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new instance <code>Py&lt;T&gt;</code> of a <code>#[pyclass]</code> on the Python heap.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>pyo3::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"attr\">#[pyclass]\n</span><span class=\"kw\">struct </span>Foo {<span class=\"comment\">/* fields omitted */</span>}\n\n<span class=\"kw\">let </span>foo = Python::with_gil(|py| -&gt; PyResult&lt;<span class=\"kw\">_</span>&gt; {\n    <span class=\"kw\">let </span>foo: Py&lt;Foo&gt; = Py::new(py, Foo {})<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(foo)\n})<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details></div></details>",0,"pyo3::instance::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Py%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1111-1150\">Source</a><a href=\"#impl-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"pyo3/struct.Py.html\" title=\"struct pyo3::Py\">Py</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1121-1123\">Source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/struct.Py.html#tymethod.as_ptr\" class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.pointer.html\">*mut </a><a class=\"struct\" href=\"pyo3/ffi/struct.PyObject.html\" title=\"struct pyo3::ffi::PyObject\">PyObject</a></h4></section></summary><div class=\"docblock\"><p>Returns the raw FFI pointer represented by self.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>Callers are responsible for ensuring that the pointer does not outlive self.</p>\n<p>The reference is borrowed; callers should not decrease the reference count\nwhen they are finished with the pointer.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_ptr\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1132-1134\">Source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/struct.Py.html#tymethod.into_ptr\" class=\"fn\">into_ptr</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.pointer.html\">*mut </a><a class=\"struct\" href=\"pyo3/ffi/struct.PyObject.html\" title=\"struct pyo3::ffi::PyObject\">PyObject</a></h4></section></summary><div class=\"docblock\"><p>Returns an owned raw FFI pointer represented by self.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>The reference is owned; when finished the caller should either transfer ownership\nof the pointer or decrease the reference count (e.g. with <a href=\"pyo3/ffi/fn.Py_DecRef.html\" title=\"fn pyo3::ffi::Py_DecRef\"><code>pyo3::ffi::Py_DecRef</code></a>).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_any\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1138-1142\">Source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/struct.Py.html#tymethod.as_any\" class=\"fn\">as_any</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"pyo3/struct.Py.html\" title=\"struct pyo3::Py\">Py</a>&lt;<a class=\"struct\" href=\"pyo3/types/struct.PyAny.html\" title=\"struct pyo3::types::PyAny\">PyAny</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Helper to cast to <code>Py&lt;PyAny&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_any\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1146-1149\">Source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/struct.Py.html#tymethod.into_any\" class=\"fn\">into_any</a>(self) -&gt; <a class=\"struct\" href=\"pyo3/struct.Py.html\" title=\"struct pyo3::Py\">Py</a>&lt;<a class=\"struct\" href=\"pyo3/types/struct.PyAny.html\" title=\"struct pyo3::types::PyAny\">PyAny</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Helper to cast to <code>Py&lt;PyAny&gt;</code>, transferring ownership.</p>\n</div></details></div></details>",0,"pyo3::instance::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Py%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1152-1310\">Source</a><a href=\"#impl-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"pyo3/struct.Py.html\" title=\"struct pyo3::Py\">Py</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"pyo3/pyclass/trait.PyClass.html\" title=\"trait pyo3::pyclass::PyClass\">PyClass</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1193-1195\">Source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/struct.Py.html#tymethod.borrow\" class=\"fn\">borrow</a>&lt;'py&gt;(&amp;'py self, py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'py&gt;) -&gt; <a class=\"struct\" href=\"pyo3/pycell/struct.PyRef.html\" title=\"struct pyo3::pycell::PyRef\">PyRef</a>&lt;'py, T&gt;</h4></section></summary><div class=\"docblock\"><p>Immutably borrows the value <code>T</code>.</p>\n<p>This borrow lasts while the returned <a href=\"pyo3/pycell/struct.PyRef.html\" title=\"struct pyo3::pycell::PyRef\"><code>PyRef</code></a> exists.\nMultiple immutable borrows can be taken out at the same time.</p>\n<p>For frozen classes, the simpler <a href=\"pyo3/struct.Py.html#method.get\" title=\"method pyo3::Py::get\"><code>get</code></a> is available.</p>\n<p>Equivalent to <code>self.bind(py).borrow()</code> - see <a href=\"pyo3/struct.Bound.html#method.borrow\" title=\"method pyo3::Bound::borrow\"><code>Bound::borrow</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[pyclass]\n</span><span class=\"kw\">struct </span>Foo {\n    inner: u8,\n}\n\nPython::with_gil(|py| -&gt; PyResult&lt;()&gt; {\n    <span class=\"kw\">let </span>foo: Py&lt;Foo&gt; = Py::new(py, Foo { inner: <span class=\"number\">73 </span>})<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>inner: <span class=\"kw-2\">&amp;</span>u8 = <span class=\"kw-2\">&amp;</span>foo.borrow(py).inner;\n\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>inner, <span class=\"number\">73</span>);\n    <span class=\"prelude-val\">Ok</span>(())\n})<span class=\"question-mark\">?</span>;</code></pre></div>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the value is currently mutably borrowed. For a non-panicking variant, use\n<a href=\"#method.try_borrow\"><code>try_borrow</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1230-1235\">Source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/struct.Py.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>&lt;'py&gt;(&amp;'py self, py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'py&gt;) -&gt; <a class=\"struct\" href=\"pyo3/pycell/struct.PyRefMut.html\" title=\"struct pyo3::pycell::PyRefMut\">PyRefMut</a>&lt;'py, T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"pyo3/pyclass/trait.PyClass.html\" title=\"trait pyo3::pyclass::PyClass\">PyClass</a>&lt;Frozen = False&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Mutably borrows the value <code>T</code>.</p>\n<p>This borrow lasts while the returned <a href=\"pyo3/pycell/struct.PyRefMut.html\" title=\"struct pyo3::pycell::PyRefMut\"><code>PyRefMut</code></a> exists.</p>\n<p>Equivalent to <code>self.bind(py).borrow_mut()</code> - see <a href=\"pyo3/struct.Bound.html#method.borrow_mut\" title=\"method pyo3::Bound::borrow_mut\"><code>Bound::borrow_mut</code></a>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[pyclass]\n</span><span class=\"kw\">struct </span>Foo {\n    inner: u8,\n}\n\nPython::with_gil(|py| -&gt; PyResult&lt;()&gt; {\n    <span class=\"kw\">let </span>foo: Py&lt;Foo&gt; = Py::new(py, Foo { inner: <span class=\"number\">73 </span>})<span class=\"question-mark\">?</span>;\n    foo.borrow_mut(py).inner = <span class=\"number\">35</span>;\n\n    <span class=\"macro\">assert_eq!</span>(foo.borrow(py).inner, <span class=\"number\">35</span>);\n    <span class=\"prelude-val\">Ok</span>(())\n})<span class=\"question-mark\">?</span>;</code></pre></div>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the value is currently borrowed. For a non-panicking variant, use\n<a href=\"#method.try_borrow_mut\"><code>try_borrow_mut</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_borrow\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1247-1249\">Source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/struct.Py.html#tymethod.try_borrow\" class=\"fn\">try_borrow</a>&lt;'py&gt;(\n    &amp;'py self,\n    py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'py&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"pyo3/pycell/struct.PyRef.html\" title=\"struct pyo3::pycell::PyRef\">PyRef</a>&lt;'py, T&gt;, <a class=\"struct\" href=\"pyo3/pycell/struct.PyBorrowError.html\" title=\"struct pyo3::pycell::PyBorrowError\">PyBorrowError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to immutably borrow the value <code>T</code>, returning an error if the value is currently mutably borrowed.</p>\n<p>The borrow lasts while the returned <a href=\"pyo3/pycell/struct.PyRef.html\" title=\"struct pyo3::pycell::PyRef\"><code>PyRef</code></a> exists.</p>\n<p>This is the non-panicking variant of <a href=\"#method.borrow\"><code>borrow</code></a>.</p>\n<p>For frozen classes, the simpler <a href=\"pyo3/struct.Py.html#method.get\" title=\"method pyo3::Py::get\"><code>get</code></a> is available.</p>\n<p>Equivalent to <code>self.bind(py).try_borrow()</code> - see <a href=\"pyo3/struct.Bound.html#method.try_borrow\" title=\"method pyo3::Bound::try_borrow\"><code>Bound::try_borrow</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_borrow_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1259-1267\">Source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/struct.Py.html#tymethod.try_borrow_mut\" class=\"fn\">try_borrow_mut</a>&lt;'py&gt;(\n    &amp;'py self,\n    py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'py&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"pyo3/pycell/struct.PyRefMut.html\" title=\"struct pyo3::pycell::PyRefMut\">PyRefMut</a>&lt;'py, T&gt;, <a class=\"struct\" href=\"pyo3/pycell/struct.PyBorrowMutError.html\" title=\"struct pyo3::pycell::PyBorrowMutError\">PyBorrowMutError</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"pyo3/pyclass/trait.PyClass.html\" title=\"trait pyo3::pyclass::PyClass\">PyClass</a>&lt;Frozen = False&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Attempts to mutably borrow the value <code>T</code>, returning an error if the value is currently borrowed.</p>\n<p>The borrow lasts while the returned <a href=\"pyo3/pycell/struct.PyRefMut.html\" title=\"struct pyo3::pycell::PyRefMut\"><code>PyRefMut</code></a> exists.</p>\n<p>This is the non-panicking variant of <a href=\"#method.borrow_mut\"><code>borrow_mut</code></a>.</p>\n<p>Equivalent to <code>self.bind(py).try_borrow_mut()</code> - see <a href=\"pyo3/struct.Bound.html#method.try_borrow_mut\" title=\"method pyo3::Bound::try_borrow_mut\"><code>Bound::try_borrow_mut</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1294-1300\">Source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/struct.Py.html#tymethod.get\" class=\"fn\">get</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"pyo3/pyclass/trait.PyClass.html\" title=\"trait pyo3::pyclass::PyClass\">PyClass</a>&lt;Frozen = True&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,</div></h4></section></summary><div class=\"docblock\"><p>Provide an immutable borrow of the value <code>T</code> without acquiring the GIL.</p>\n<p>This is available if the class is <a href=\"pyo3/attr.pyclass.html\" title=\"attr pyo3::pyclass\"><code>frozen</code></a> and <a href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\"><code>Sync</code></a>.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicUsize, Ordering};\n\n<span class=\"attr\">#[pyclass(frozen)]\n</span><span class=\"kw\">struct </span>FrozenCounter {\n    value: AtomicUsize,\n}\n\n<span class=\"kw\">let </span>cell  = Python::with_gil(|py| {\n    <span class=\"kw\">let </span>counter = FrozenCounter { value: AtomicUsize::new(<span class=\"number\">0</span>) };\n\n    Py::new(py, counter).unwrap()\n});\n\ncell.get().value.fetch_add(<span class=\"number\">1</span>, Ordering::Relaxed);</code></pre></div>\n</div></details></div></details>",0,"pyo3::instance::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Py%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1312-1743\">Source</a><a href=\"#impl-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"pyo3/struct.Py.html\" title=\"struct pyo3::Py\">Py</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bind\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1315-1318\">Source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/struct.Py.html#tymethod.bind\" class=\"fn\">bind</a>&lt;'py&gt;(&amp;self, _py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'py&gt;) -&gt; &amp;<a class=\"struct\" href=\"pyo3/struct.Bound.html\" title=\"struct pyo3::Bound\">Bound</a>&lt;'py, T&gt;</h4></section></summary><div class=\"docblock\"><p>Attaches this <code>Py</code> to the given Python context, allowing access to further Python APIs.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_bound\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1322-1324\">Source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/struct.Py.html#tymethod.into_bound\" class=\"fn\">into_bound</a>(self, py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;) -&gt; <a class=\"struct\" href=\"pyo3/struct.Bound.html\" title=\"struct pyo3::Bound\">Bound</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Same as <code>bind</code> but takes ownership of <code>self</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bind_borrowed\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1328-1330\">Source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/struct.Py.html#tymethod.bind_borrowed\" class=\"fn\">bind_borrowed</a>&lt;'a, 'py&gt;(&amp;'a self, py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'py&gt;) -&gt; <a class=\"struct\" href=\"pyo3/struct.Borrowed.html\" title=\"struct pyo3::Borrowed\">Borrowed</a>&lt;'a, 'py, T&gt;</h4></section></summary><div class=\"docblock\"><p>Same as <code>bind</code> but produces a <code>Borrowed&lt;T&gt;</code> instead of a <code>Bound&lt;T&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1337-1339\">Source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/struct.Py.html#tymethod.is\" class=\"fn\">is</a>&lt;U: <a class=\"trait\" href=\"pyo3/conversion/trait.AsPyPointer.html\" title=\"trait pyo3::conversion::AsPyPointer\">AsPyPointer</a>&gt;(&amp;self, o: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;U</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns whether <code>self</code> and <code>other</code> point to the same object. To compare\nthe equality of two objects (the <code>==</code> operator), use <a href=\"pyo3/types/trait.PyAnyMethods.html#tymethod.eq\" title=\"method pyo3::types::PyAnyMethods::eq\"><code>eq</code></a>.</p>\n<p>This is equivalent to the Python expression <code>self is other</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_refcnt\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1343-1345\">Source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/struct.Py.html#tymethod.get_refcnt\" class=\"fn\">get_refcnt</a>(&amp;self, _py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a></h4></section></summary><div class=\"docblock\"><p>Gets the reference count of the <code>ffi::PyObject</code> pointer.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_ref\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1370-1375\">Source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/struct.Py.html#tymethod.clone_ref\" class=\"fn\">clone_ref</a>(&amp;self, _py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;) -&gt; <a class=\"struct\" href=\"pyo3/struct.Py.html\" title=\"struct pyo3::Py\">Py</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Makes a clone of <code>self</code>.</p>\n<p>This creates another pointer to the same object, increasing its reference count.</p>\n<p>You should prefer using this method over <a href=\"https://doc.rust-lang.org/1.85.1/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\"><code>Clone</code></a> if you happen to be holding the GIL already.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>pyo3::prelude::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>pyo3::types::PyDict;\n\nPython::with_gil(|py| {\n    <span class=\"kw\">let </span>first: Py&lt;PyDict&gt; = PyDict::new(py).unbind();\n    <span class=\"kw\">let </span>second = Py::clone_ref(<span class=\"kw-2\">&amp;</span>first, py);\n\n    <span class=\"comment\">// Both point to the same object\n    </span><span class=\"macro\">assert!</span>(first.is(<span class=\"kw-2\">&amp;</span>second));\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop_ref\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1402-1404\">Source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/struct.Py.html#tymethod.drop_ref\" class=\"fn\">drop_ref</a>(self, py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;)</h4></section></summary><div class=\"docblock\"><p>Drops <code>self</code> and immediately decreases its reference count.</p>\n<p>This method is a micro-optimisation over <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\"><code>Drop</code></a> if you happen to be holding the GIL\nalready.</p>\n<p>Note that if you are using <a href=\"pyo3/struct.Bound.html\" title=\"struct pyo3::Bound\"><code>Bound</code></a>, you do not need to use <a href=\"pyo3/struct.Py.html#method.drop_ref\" title=\"method pyo3::Py::drop_ref\"><code>Self::drop_ref</code></a> since\n<a href=\"pyo3/struct.Bound.html\" title=\"struct pyo3::Bound\"><code>Bound</code></a> guarantees that the GIL is held.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>pyo3::prelude::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>pyo3::types::PyDict;\n\nPython::with_gil(|py| {\n    <span class=\"kw\">let </span>object: Py&lt;PyDict&gt; = PyDict::new(py).unbind();\n\n    <span class=\"comment\">// some usage of object\n\n    </span>object.drop_ref(py);\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_none\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1409-1411\">Source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/struct.Py.html#tymethod.is_none\" class=\"fn\">is_none</a>(&amp;self, _py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns whether the object is considered to be None.</p>\n<p>This is equivalent to the Python expression <code>self is None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_truthy\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1416-1420\">Source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/struct.Py.html#tymethod.is_truthy\" class=\"fn\">is_truthy</a>(&amp;self, py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"pyo3/type.PyResult.html\" title=\"type pyo3::PyResult\">PyResult</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns whether the object is considered to be true.</p>\n<p>This applies truth value testing equivalent to the Python expression <code>bool(self)</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extract\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1425-1433\">Source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/struct.Py.html#tymethod.extract\" class=\"fn\">extract</a>&lt;'a, 'py, D&gt;(&amp;'a self, py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'py&gt;) -&gt; <a class=\"type\" href=\"pyo3/type.PyResult.html\" title=\"type pyo3::PyResult\">PyResult</a>&lt;D&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"pyo3/conversion/trait.FromPyObjectBound.html\" title=\"trait pyo3::conversion::FromPyObjectBound\">FromPyObjectBound</a>&lt;'a, 'py&gt;,\n    'py: 'a,</div></h4></section></summary><div class=\"docblock\"><p>Extracts some type from the Python object.</p>\n<p>This is a wrapper function around <code>FromPyObject::extract()</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.getattr\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1458-1463\">Source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/struct.Py.html#tymethod.getattr\" class=\"fn\">getattr</a>&lt;'py, N&gt;(\n    &amp;self,\n    py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'py&gt;,\n    attr_name: N,\n) -&gt; <a class=\"type\" href=\"pyo3/type.PyResult.html\" title=\"type pyo3::PyResult\">PyResult</a>&lt;<a class=\"type\" href=\"pyo3/type.PyObject.html\" title=\"type pyo3::PyObject\">PyObject</a>&gt;<div class=\"where\">where\n    N: <a class=\"trait\" href=\"pyo3/conversion/trait.IntoPyObject.html\" title=\"trait pyo3::conversion::IntoPyObject\">IntoPyObject</a>&lt;'py, Target = <a class=\"struct\" href=\"pyo3/types/struct.PyString.html\" title=\"struct pyo3::types::PyString\">PyString</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Retrieves an attribute value.</p>\n<p>This is equivalent to the Python expression <code>self.attr_name</code>.</p>\n<p>If calling this method becomes performance-critical, the <a href=\"pyo3/macro.intern.html\" title=\"macro pyo3::intern\"><code>intern!</code></a> macro\ncan be used to intern <code>attr_name</code>, thereby avoiding repeated temporary allocations of\nPython strings.</p>\n<h5 id=\"example-interning-the-attribute-name\"><a class=\"doc-anchor\" href=\"#example-interning-the-attribute-name\">§</a>Example: <code>intern!</code>ing the attribute name</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[pyfunction]\n</span><span class=\"kw\">fn </span>version(sys: Py&lt;PyModule&gt;, py: Python&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; PyResult&lt;PyObject&gt; {\n    sys.getattr(py, <span class=\"macro\">intern!</span>(py, <span class=\"string\">\"version\"</span>))\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.setattr\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1487-1493\">Source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/struct.Py.html#tymethod.setattr\" class=\"fn\">setattr</a>&lt;'py, N, V&gt;(\n    &amp;self,\n    py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'py&gt;,\n    attr_name: N,\n    value: V,\n) -&gt; <a class=\"type\" href=\"pyo3/type.PyResult.html\" title=\"type pyo3::PyResult\">PyResult</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.unit.html\">()</a>&gt;<div class=\"where\">where\n    N: <a class=\"trait\" href=\"pyo3/conversion/trait.IntoPyObject.html\" title=\"trait pyo3::conversion::IntoPyObject\">IntoPyObject</a>&lt;'py, Target = <a class=\"struct\" href=\"pyo3/types/struct.PyString.html\" title=\"struct pyo3::types::PyString\">PyString</a>&gt;,\n    V: <a class=\"trait\" href=\"pyo3/conversion/trait.IntoPyObject.html\" title=\"trait pyo3::conversion::IntoPyObject\">IntoPyObject</a>&lt;'py&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Sets an attribute value.</p>\n<p>This is equivalent to the Python expression <code>self.attr_name = value</code>.</p>\n<p>To avoid repeated temporary allocations of Python strings, the <a href=\"pyo3/macro.intern.html\" title=\"macro pyo3::intern\"><code>intern!</code></a>\nmacro can be used to intern <code>attr_name</code>.</p>\n<h5 id=\"example-interning-the-attribute-name-1\"><a class=\"doc-anchor\" href=\"#example-interning-the-attribute-name-1\">§</a>Example: <code>intern!</code>ing the attribute name</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[pyfunction]\n</span><span class=\"kw\">fn </span>set_answer(ob: PyObject, py: Python&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; PyResult&lt;()&gt; {\n    ob.setattr(py, <span class=\"macro\">intern!</span>(py, <span class=\"string\">\"answer\"</span>), <span class=\"number\">42</span>)\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.call\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1498-1515\">Source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/struct.Py.html#tymethod.call\" class=\"fn\">call</a>&lt;'py, A&gt;(\n    &amp;self,\n    py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'py&gt;,\n    args: A,\n    kwargs: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"pyo3/struct.Bound.html\" title=\"struct pyo3::Bound\">Bound</a>&lt;'py, <a class=\"struct\" href=\"pyo3/types/struct.PyDict.html\" title=\"struct pyo3::types::PyDict\">PyDict</a>&gt;&gt;,\n) -&gt; <a class=\"type\" href=\"pyo3/type.PyResult.html\" title=\"type pyo3::PyResult\">PyResult</a>&lt;<a class=\"type\" href=\"pyo3/type.PyObject.html\" title=\"type pyo3::PyObject\">PyObject</a>&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"pyo3/conversion/trait.IntoPyObject.html\" title=\"trait pyo3::conversion::IntoPyObject\">IntoPyObject</a>&lt;'py, Target = <a class=\"struct\" href=\"pyo3/types/struct.PyTuple.html\" title=\"struct pyo3::types::PyTuple\">PyTuple</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Calls the object.</p>\n<p>This is equivalent to the Python expression <code>self(*args, **kwargs)</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.call_bound\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1521-1528\">Source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/struct.Py.html#tymethod.call_bound\" class=\"fn\">call_bound</a>(\n    &amp;self,\n    py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;,\n    args: impl <a class=\"trait\" href=\"pyo3/conversion/trait.IntoPy.html\" title=\"trait pyo3::conversion::IntoPy\">IntoPy</a>&lt;<a class=\"struct\" href=\"pyo3/struct.Py.html\" title=\"struct pyo3::Py\">Py</a>&lt;<a class=\"struct\" href=\"pyo3/types/struct.PyTuple.html\" title=\"struct pyo3::types::PyTuple\">PyTuple</a>&gt;&gt;,\n    kwargs: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"pyo3/struct.Bound.html\" title=\"struct pyo3::Bound\">Bound</a>&lt;'_, <a class=\"struct\" href=\"pyo3/types/struct.PyDict.html\" title=\"struct pyo3::types::PyDict\">PyDict</a>&gt;&gt;,\n) -&gt; <a class=\"type\" href=\"pyo3/type.PyResult.html\" title=\"type pyo3::PyResult\">PyResult</a>&lt;<a class=\"type\" href=\"pyo3/type.PyObject.html\" title=\"type pyo3::PyObject\">PyObject</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.23.0: renamed to <code>Py::call</code></span></div></span></summary><div class=\"docblock\"><p>Deprecated name for <a href=\"pyo3/struct.Py.html#method.call\" title=\"method pyo3::Py::call\"><code>Py::call</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.call1\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1533-1542\">Source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/struct.Py.html#tymethod.call1\" class=\"fn\">call1</a>&lt;'py, N&gt;(&amp;self, py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'py&gt;, args: N) -&gt; <a class=\"type\" href=\"pyo3/type.PyResult.html\" title=\"type pyo3::PyResult\">PyResult</a>&lt;<a class=\"type\" href=\"pyo3/type.PyObject.html\" title=\"type pyo3::PyObject\">PyObject</a>&gt;<div class=\"where\">where\n    N: <a class=\"trait\" href=\"pyo3/conversion/trait.IntoPyObject.html\" title=\"trait pyo3::conversion::IntoPyObject\">IntoPyObject</a>&lt;'py, Target = <a class=\"struct\" href=\"pyo3/types/struct.PyTuple.html\" title=\"struct pyo3::types::PyTuple\">PyTuple</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Calls the object with only positional arguments.</p>\n<p>This is equivalent to the Python expression <code>self(*args)</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.call0\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1547-1549\">Source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/struct.Py.html#tymethod.call0\" class=\"fn\">call0</a>(&amp;self, py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"pyo3/type.PyResult.html\" title=\"type pyo3::PyResult\">PyResult</a>&lt;<a class=\"type\" href=\"pyo3/type.PyObject.html\" title=\"type pyo3::PyObject\">PyObject</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Calls the object without arguments.</p>\n<p>This is equivalent to the Python expression <code>self()</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.call_method\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1557-1577\">Source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/struct.Py.html#tymethod.call_method\" class=\"fn\">call_method</a>&lt;'py, N, A&gt;(\n    &amp;self,\n    py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'py&gt;,\n    name: N,\n    args: A,\n    kwargs: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"pyo3/struct.Bound.html\" title=\"struct pyo3::Bound\">Bound</a>&lt;'py, <a class=\"struct\" href=\"pyo3/types/struct.PyDict.html\" title=\"struct pyo3::types::PyDict\">PyDict</a>&gt;&gt;,\n) -&gt; <a class=\"type\" href=\"pyo3/type.PyResult.html\" title=\"type pyo3::PyResult\">PyResult</a>&lt;<a class=\"type\" href=\"pyo3/type.PyObject.html\" title=\"type pyo3::PyObject\">PyObject</a>&gt;<div class=\"where\">where\n    N: <a class=\"trait\" href=\"pyo3/conversion/trait.IntoPyObject.html\" title=\"trait pyo3::conversion::IntoPyObject\">IntoPyObject</a>&lt;'py, Target = <a class=\"struct\" href=\"pyo3/types/struct.PyString.html\" title=\"struct pyo3::types::PyString\">PyString</a>&gt;,\n    A: <a class=\"trait\" href=\"pyo3/conversion/trait.IntoPyObject.html\" title=\"trait pyo3::conversion::IntoPyObject\">IntoPyObject</a>&lt;'py, Target = <a class=\"struct\" href=\"pyo3/types/struct.PyTuple.html\" title=\"struct pyo3::types::PyTuple\">PyTuple</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Calls a method on the object.</p>\n<p>This is equivalent to the Python expression <code>self.name(*args, **kwargs)</code>.</p>\n<p>To avoid repeated temporary allocations of Python strings, the <a href=\"pyo3/macro.intern.html\" title=\"macro pyo3::intern\"><code>intern!</code></a>\nmacro can be used to intern <code>name</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.call_method_bound\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1583-1595\">Source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/struct.Py.html#tymethod.call_method_bound\" class=\"fn\">call_method_bound</a>&lt;N, A&gt;(\n    &amp;self,\n    py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;,\n    name: N,\n    args: A,\n    kwargs: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"pyo3/struct.Bound.html\" title=\"struct pyo3::Bound\">Bound</a>&lt;'_, <a class=\"struct\" href=\"pyo3/types/struct.PyDict.html\" title=\"struct pyo3::types::PyDict\">PyDict</a>&gt;&gt;,\n) -&gt; <a class=\"type\" href=\"pyo3/type.PyResult.html\" title=\"type pyo3::PyResult\">PyResult</a>&lt;<a class=\"type\" href=\"pyo3/type.PyObject.html\" title=\"type pyo3::PyObject\">PyObject</a>&gt;<div class=\"where\">where\n    N: <a class=\"trait\" href=\"pyo3/conversion/trait.IntoPy.html\" title=\"trait pyo3::conversion::IntoPy\">IntoPy</a>&lt;<a class=\"struct\" href=\"pyo3/struct.Py.html\" title=\"struct pyo3::Py\">Py</a>&lt;<a class=\"struct\" href=\"pyo3/types/struct.PyString.html\" title=\"struct pyo3::types::PyString\">PyString</a>&gt;&gt;,\n    A: <a class=\"trait\" href=\"pyo3/conversion/trait.IntoPy.html\" title=\"trait pyo3::conversion::IntoPy\">IntoPy</a>&lt;<a class=\"struct\" href=\"pyo3/struct.Py.html\" title=\"struct pyo3::Py\">Py</a>&lt;<a class=\"struct\" href=\"pyo3/types/struct.PyTuple.html\" title=\"struct pyo3::types::PyTuple\">PyTuple</a>&gt;&gt;,</div></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.23.0: renamed to <code>Py::call_method</code></span></div></span></summary><div class=\"docblock\"><p>Deprecated name for <a href=\"pyo3/struct.Py.html#method.call_method\" title=\"method pyo3::Py::call_method\"><code>Py::call_method</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.call_method1\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1603-1616\">Source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/struct.Py.html#tymethod.call_method1\" class=\"fn\">call_method1</a>&lt;'py, N, A&gt;(\n    &amp;self,\n    py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'py&gt;,\n    name: N,\n    args: A,\n) -&gt; <a class=\"type\" href=\"pyo3/type.PyResult.html\" title=\"type pyo3::PyResult\">PyResult</a>&lt;<a class=\"type\" href=\"pyo3/type.PyObject.html\" title=\"type pyo3::PyObject\">PyObject</a>&gt;<div class=\"where\">where\n    N: <a class=\"trait\" href=\"pyo3/conversion/trait.IntoPyObject.html\" title=\"trait pyo3::conversion::IntoPyObject\">IntoPyObject</a>&lt;'py, Target = <a class=\"struct\" href=\"pyo3/types/struct.PyString.html\" title=\"struct pyo3::types::PyString\">PyString</a>&gt;,\n    A: <a class=\"trait\" href=\"pyo3/conversion/trait.IntoPyObject.html\" title=\"trait pyo3::conversion::IntoPyObject\">IntoPyObject</a>&lt;'py, Target = <a class=\"struct\" href=\"pyo3/types/struct.PyTuple.html\" title=\"struct pyo3::types::PyTuple\">PyTuple</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Calls a method on the object with only positional arguments.</p>\n<p>This is equivalent to the Python expression <code>self.name(*args)</code>.</p>\n<p>To avoid repeated temporary allocations of Python strings, the <a href=\"pyo3/macro.intern.html\" title=\"macro pyo3::intern\"><code>intern!</code></a>\nmacro can be used to intern <code>name</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.call_method0\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1624-1629\">Source</a><h4 class=\"code-header\">pub fn <a href=\"pyo3/struct.Py.html#tymethod.call_method0\" class=\"fn\">call_method0</a>&lt;'py, N&gt;(\n    &amp;self,\n    py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'py&gt;,\n    name: N,\n) -&gt; <a class=\"type\" href=\"pyo3/type.PyResult.html\" title=\"type pyo3::PyResult\">PyResult</a>&lt;<a class=\"type\" href=\"pyo3/type.PyObject.html\" title=\"type pyo3::PyObject\">PyObject</a>&gt;<div class=\"where\">where\n    N: <a class=\"trait\" href=\"pyo3/conversion/trait.IntoPyObject.html\" title=\"trait pyo3::conversion::IntoPyObject\">IntoPyObject</a>&lt;'py, Target = <a class=\"struct\" href=\"pyo3/types/struct.PyString.html\" title=\"struct pyo3::types::PyString\">PyString</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Calls a method on the object with no arguments.</p>\n<p>This is equivalent to the Python expression <code>self.name()</code>.</p>\n<p>To avoid repeated temporary allocations of Python strings, the <a href=\"pyo3/macro.intern.html\" title=\"macro pyo3::intern\"><code>intern!</code></a>\nmacro can be used to intern <code>name</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_owned_ptr\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1643-1648\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"pyo3/struct.Py.html#tymethod.from_owned_ptr\" class=\"fn\">from_owned_ptr</a>(py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;, ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.pointer.html\">*mut </a><a class=\"struct\" href=\"pyo3/ffi/struct.PyObject.html\" title=\"struct pyo3::ffi::PyObject\">PyObject</a>) -&gt; <a class=\"struct\" href=\"pyo3/struct.Py.html\" title=\"struct pyo3::Py\">Py</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Create a <code>Py&lt;T&gt;</code> instance by taking ownership of the given FFI pointer.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p><code>ptr</code> must be a pointer to a Python object of type T.</p>\n<p>Callers must own the object referred to by <code>ptr</code>, as this function\nimplicitly takes ownership of that object.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>ptr</code> is null.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_owned_ptr_or_err\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1657-1665\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"pyo3/struct.Py.html#tymethod.from_owned_ptr_or_err\" class=\"fn\">from_owned_ptr_or_err</a>(\n    py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;,\n    ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.pointer.html\">*mut </a><a class=\"struct\" href=\"pyo3/ffi/struct.PyObject.html\" title=\"struct pyo3::ffi::PyObject\">PyObject</a>,\n) -&gt; <a class=\"type\" href=\"pyo3/type.PyResult.html\" title=\"type pyo3::PyResult\">PyResult</a>&lt;<a class=\"struct\" href=\"pyo3/struct.Py.html\" title=\"struct pyo3::Py\">Py</a>&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Create a <code>Py&lt;T&gt;</code> instance by taking ownership of the given FFI pointer.</p>\n<p>If <code>ptr</code> is null then the current Python exception is fetched as a <a href=\"pyo3/struct.PyErr.html\" title=\"struct pyo3::PyErr\"><code>PyErr</code></a>.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>If non-null, <code>ptr</code> must be a pointer to a Python object of type T.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_owned_ptr_or_opt\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1674-1676\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"pyo3/struct.Py.html#tymethod.from_owned_ptr_or_opt\" class=\"fn\">from_owned_ptr_or_opt</a>(\n    _py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;,\n    ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.pointer.html\">*mut </a><a class=\"struct\" href=\"pyo3/ffi/struct.PyObject.html\" title=\"struct pyo3::ffi::PyObject\">PyObject</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Create a <code>Py&lt;T&gt;</code> instance by taking ownership of the given FFI pointer.</p>\n<p>If <code>ptr</code> is null then <code>None</code> is returned.</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">§</a>Safety</h5>\n<p>If non-null, <code>ptr</code> must be a pointer to a Python object of type T.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_borrowed_ptr\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1696-1701\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"pyo3/struct.Py.html#tymethod.from_borrowed_ptr\" class=\"fn\">from_borrowed_ptr</a>(py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;, ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.pointer.html\">*mut </a><a class=\"struct\" href=\"pyo3/ffi/struct.PyObject.html\" title=\"struct pyo3::ffi::PyObject\">PyObject</a>) -&gt; <a class=\"struct\" href=\"pyo3/struct.Py.html\" title=\"struct pyo3::Py\">Py</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Create a <code>Py&lt;T&gt;</code> instance by creating a new reference from the given FFI pointer.</p>\n<h5 id=\"safety-3\"><a class=\"doc-anchor\" href=\"#safety-3\">§</a>Safety</h5>\n<p><code>ptr</code> must be a pointer to a Python object of type T.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if <code>ptr</code> is null.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_borrowed_ptr_or_err\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1710-1715\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"pyo3/struct.Py.html#tymethod.from_borrowed_ptr_or_err\" class=\"fn\">from_borrowed_ptr_or_err</a>(\n    py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;,\n    ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.pointer.html\">*mut </a><a class=\"struct\" href=\"pyo3/ffi/struct.PyObject.html\" title=\"struct pyo3::ffi::PyObject\">PyObject</a>,\n) -&gt; <a class=\"type\" href=\"pyo3/type.PyResult.html\" title=\"type pyo3::PyResult\">PyResult</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Create a <code>Py&lt;T&gt;</code> instance by creating a new reference from the given FFI pointer.</p>\n<p>If <code>ptr</code> is null then the current Python exception is fetched as a <code>PyErr</code>.</p>\n<h5 id=\"safety-4\"><a class=\"doc-anchor\" href=\"#safety-4\">§</a>Safety</h5>\n<p><code>ptr</code> must be a pointer to a Python object of type T.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_borrowed_ptr_or_opt\" class=\"method\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1724-1734\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"pyo3/struct.Py.html#tymethod.from_borrowed_ptr_or_opt\" class=\"fn\">from_borrowed_ptr_or_opt</a>(\n    _py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;,\n    ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.pointer.html\">*mut </a><a class=\"struct\" href=\"pyo3/ffi/struct.PyObject.html\" title=\"struct pyo3::ffi::PyObject\">PyObject</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Create a <code>Py&lt;T&gt;</code> instance by creating a new reference from the given FFI pointer.</p>\n<p>If <code>ptr</code> is null then <code>None</code> is returned.</p>\n<h5 id=\"safety-5\"><a class=\"doc-anchor\" href=\"#safety-5\">§</a>Safety</h5>\n<p><code>ptr</code> must be a pointer to a Python object of type T.</p>\n</div></details></div></details>",0,"pyo3::instance::PyObject"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToPyObject-for-Py%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1746-1752\">Source</a><a href=\"#impl-ToPyObject-for-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"pyo3/conversion/trait.ToPyObject.html\" title=\"trait pyo3::conversion::ToPyObject\">ToPyObject</a> for <a class=\"struct\" href=\"pyo3/struct.Py.html\" title=\"struct pyo3::Py\">Py</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_object\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1749-1751\">Source</a><a href=\"#method.to_object\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"pyo3/conversion/trait.ToPyObject.html#tymethod.to_object\" class=\"fn\">to_object</a>(&amp;self, py: <a class=\"struct\" href=\"pyo3/marker/struct.Python.html\" title=\"struct pyo3::marker::Python\">Python</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"pyo3/type.PyObject.html\" title=\"type pyo3::PyObject\">PyObject</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.23.0: <code>ToPyObject</code> is going to be replaced by <code>IntoPyObject</code>. See the migration guide (https://pyo3.rs/v0.23.0/migration) for more information.</span></div></span></summary><div class=\"docblock\"><p>Converts <code>Py</code> instance -&gt; PyObject.</p>\n</div></details></div></details>","ToPyObject","pyo3::instance::PyObject"],["<section id=\"impl-Send-for-Py%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1080\">Source</a><a href=\"#impl-Send-for-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for <a class=\"struct\" href=\"pyo3/struct.Py.html\" title=\"struct pyo3::Py\">Py</a>&lt;T&gt;</h3></section>","Send","pyo3::instance::PyObject"],["<section id=\"impl-Sync-for-Py%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/pyo3/instance.rs.html#1081\">Source</a><a href=\"#impl-Sync-for-Py%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"pyo3/struct.Py.html\" title=\"struct pyo3::Py\">Py</a>&lt;T&gt;</h3></section>","Sync","pyo3::instance::PyObject"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[72450]}